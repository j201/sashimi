/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"statements":4,"EOF":5,"statement":6,"moduleStatement":7,"exportStatement":8,"typeDeclaration":9,"expr":10,";":11,"module":12,"string":13,"export":14,"=":15,"identifier":16,"type":17,"fnExpr":18,"regex":19,"js":20,"number":21,"nil":22,"boolean":23,"keyword":24,"importExpr":25,"ifExpr":26,"letExpr":27,"map":28,"list":29,"set":30,"bag":31,"mapAccess":32,"binaryOperation":33,"unaryOperation":34,"assignment":35,"^":36,"(":37,"delimitedExprs":38,")":39,"exprOptionalComma":40,",":41,"exprsOptionalComma":42,"separatedExprs":43,"true":44,"false":45,".":46,"import":47,"if":48,":":49,"let":50,"letBindings":51,"letBinding":52,"fn":53,"fnBody":54,"[":55,"fnBodies":56,"]":57,"fnBindings":58,"nonRestParams":59,"restParam":60,"nonRestParam":61,"&":62,"{":63,"}":64,"#{":65,"#[":66,"+":67,"-":68,"/":69,"**":70,"*":71,"|":72,"<":73,">":74,"<=":75,">=":76,"==":77,"!=":78,"!":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:";",12:"module",13:"string",14:"export",15:"=",16:"identifier",17:"type",19:"regex",20:"js",21:"number",22:"nil",36:"^",37:"(",39:")",41:",",44:"true",45:"false",46:".",47:"import",48:"if",49:":",50:"let",53:"fn",55:"[",57:"]",62:"&",63:"{",64:"}",65:"#{",66:"#[",67:"+",68:"-",69:"/",70:"**",71:"*",72:"|",73:"<",74:">",75:"<=",76:">=",77:"==",78:"!=",79:"!"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,2],[7,3],[8,4],[8,5],[9,5],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,3],[10,4],[10,3],[10,3],[40,1],[40,2],[42,1],[42,2],[43,2],[43,3],[38,1],[38,3],[23,1],[23,1],[24,2],[25,2],[26,6],[27,4],[51,1],[51,2],[52,3],[18,2],[18,4],[56,1],[56,3],[54,3],[54,2],[58,1],[58,2],[58,1],[59,1],[59,2],[61,1],[61,2],[61,3],[61,4],[60,2],[28,3],[29,3],[30,3],[31,3],[32,2],[35,3],[35,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[34,2],[34,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = [$$[$0]] 
break;
case 3: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 8: this.$ = { type: 'module', name: $$[$0-1] } 
break;
case 9: this.$ = { type: 'export', value: $$[$0-1] } 
break;
case 10: this.$ = { type: 'exportedDefinition', name: $$[$0-3], value: $$[$0-1] } 
break;
case 11: this.$ = { type: 'typeDeclaration', typeName: $$[$0-3], factory: $$[$0-1] } 
break;
case 12: this.$ = { type: 'string', value: yytext.slice(1, -1) } 
break;
case 13: this.$ = { type: 'regex', value: yytext } 
break;
case 14: this.$ = { type: 'js', value: yytext.slice(1, -1) } 
break;
case 15: this.$ = { type: 'number', value: Number(yytext) } 
break;
case 16: this.$ = { type: 'nil' } 
break;
case 19: this.$ = { type: 'identifier', value: yytext } 
break;
case 32: this.$ = { type: "chain", left: $$[$0-2], right: $$[$0] } 
break;
case 33: this.$ = { type: 'functionCall', function: $$[$0-3], arguments: $$[$0-1] } 
break;
case 34: this.$ = { type: 'functionCall', function: $$[$0-2], arguments: [] } 
break;
case 35: this.$ = { type: 'exprList', value: $$[$0-1] } 
break;
case 38: this.$ = [$$[$0]] 
break;
case 39: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 40: this.$ = [$$[$0-1]] 
break;
case 41: $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 42: this.$ = [$$[$0]] 
break;
case 43: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 44: this.$ = { type: 'boolean', value: 'true' }; 
break;
case 45: this.$ = { type: 'boolean', value: 'false' }; 
break;
case 46: this.$ = { type: 'keyword', value: $$[$0] } 
break;
case 47: this.$ = { type: 'import', name: $$[$0] } 
break;
case 48: this.$ = { type: 'if', condition: $$[$0-4], consequent: $$[$0-2], alternative: $$[$0] } 
break;
case 49: this.$ = { type: 'let', bindings: $$[$0-2], value: $$[$0] } 
break;
case 50: this.$ = [$$[$0]]; 
break;
case 51: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 52: this.$ = { name: $$[$0-2], value: $$[$0-1] } 
break;
case 53: this.$ = { type: 'fn', bodies: [$$[$0]] } 
break;
case 54: this.$ = { type: 'fn', bodies: $$[$0-1] } 
break;
case 55: this.$ = [$$[$0]] 
break;
case 56: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 57: this.$ = { bindings: $$[$0-2], value: $$[$0] } 
break;
case 58: this.$ = { bindings: [], value: $$[$0] } 
break;
case 59: this.$ = $$[$0] 
break;
case 60: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 61: this.$ = [$$[$0]] 
break;
case 62: this.$ = [$$[$0]] 
break;
case 63: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 64: this.$ = { name: $$[$0] } 
break;
case 65: this.$ = { name: $$[$0-1] } 
break;
case 66: this.$ = { name: $$[$0-2], default: $$[$0] } 
break;
case 67: this.$ = { name: $$[$0-3], default: $$[$0-1] } 
break;
case 68: this.$ = { name: $$[$0], rest: true } 
break;
case 69: this.$ = { type: 'map', arguments: $$[$0-1] } 
break;
case 70: this.$ = { type: 'list', arguments: $$[$0-1] } 
break;
case 71: this.$ = { type: 'set', arguments: $$[$0-1] } 
break;
case 72: this.$ = { type: 'bag', arguments: $$[$0-1] } 
break;
case 73: this.$ = { type: 'mapAccess', map: $$[$0-1], key: $$[$0] } 
break;
case 74: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 75: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 76: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 77: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 78: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 79: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 80: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 81: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 82: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 83: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 84: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 85: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 86: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 87: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 88: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 89: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
case 90: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,12:[1,8],13:[1,11],14:[1,9],16:[1,18],17:[1,10],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{1:[3]},{5:[1,45],6:46,7:4,8:5,9:6,10:7,12:[1,8],13:[1,11],14:[1,9],16:[1,18],17:[1,10],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{5:[2,2],12:[2,2],13:[2,2],14:[2,2],16:[2,2],17:[2,2],19:[2,2],20:[2,2],21:[2,2],22:[2,2],37:[2,2],44:[2,2],45:[2,2],46:[2,2],47:[2,2],48:[2,2],50:[2,2],53:[2,2],55:[2,2],63:[2,2],65:[2,2],66:[2,2],68:[2,2],79:[2,2]},{5:[2,4],12:[2,4],13:[2,4],14:[2,4],16:[2,4],17:[2,4],19:[2,4],20:[2,4],21:[2,4],22:[2,4],37:[2,4],44:[2,4],45:[2,4],46:[2,4],47:[2,4],48:[2,4],50:[2,4],53:[2,4],55:[2,4],63:[2,4],65:[2,4],66:[2,4],68:[2,4],79:[2,4]},{5:[2,5],12:[2,5],13:[2,5],14:[2,5],16:[2,5],17:[2,5],19:[2,5],20:[2,5],21:[2,5],22:[2,5],37:[2,5],44:[2,5],45:[2,5],46:[2,5],47:[2,5],48:[2,5],50:[2,5],53:[2,5],55:[2,5],63:[2,5],65:[2,5],66:[2,5],68:[2,5],79:[2,5]},{5:[2,6],12:[2,6],13:[2,6],14:[2,6],16:[2,6],17:[2,6],19:[2,6],20:[2,6],21:[2,6],22:[2,6],37:[2,6],44:[2,6],45:[2,6],46:[2,6],47:[2,6],48:[2,6],50:[2,6],53:[2,6],55:[2,6],63:[2,6],65:[2,6],66:[2,6],68:[2,6],79:[2,6]},{11:[1,47],24:50,36:[1,48],37:[1,49],46:[1,34],62:[1,56],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{13:[1,64]},{15:[1,65],16:[1,66]},{16:[1,67]},{11:[2,12],16:[2,12],36:[2,12],37:[2,12],39:[2,12],41:[2,12],46:[2,12],49:[2,12],57:[2,12],62:[2,12],64:[2,12],67:[2,12],68:[2,12],69:[2,12],70:[2,12],71:[2,12],72:[2,12],73:[2,12],74:[2,12],75:[2,12],76:[2,12],77:[2,12],78:[2,12]},{11:[2,13],16:[2,13],36:[2,13],37:[2,13],39:[2,13],41:[2,13],46:[2,13],49:[2,13],57:[2,13],62:[2,13],64:[2,13],67:[2,13],68:[2,13],69:[2,13],70:[2,13],71:[2,13],72:[2,13],73:[2,13],74:[2,13],75:[2,13],76:[2,13],77:[2,13],78:[2,13]},{11:[2,14],16:[2,14],36:[2,14],37:[2,14],39:[2,14],41:[2,14],46:[2,14],49:[2,14],57:[2,14],62:[2,14],64:[2,14],67:[2,14],68:[2,14],69:[2,14],70:[2,14],71:[2,14],72:[2,14],73:[2,14],74:[2,14],75:[2,14],76:[2,14],77:[2,14],78:[2,14]},{11:[2,15],16:[2,15],36:[2,15],37:[2,15],39:[2,15],41:[2,15],46:[2,15],49:[2,15],57:[2,15],62:[2,15],64:[2,15],67:[2,15],68:[2,15],69:[2,15],70:[2,15],71:[2,15],72:[2,15],73:[2,15],74:[2,15],75:[2,15],76:[2,15],77:[2,15],78:[2,15]},{11:[2,16],16:[2,16],36:[2,16],37:[2,16],39:[2,16],41:[2,16],46:[2,16],49:[2,16],57:[2,16],62:[2,16],64:[2,16],67:[2,16],68:[2,16],69:[2,16],70:[2,16],71:[2,16],72:[2,16],73:[2,16],74:[2,16],75:[2,16],76:[2,16],77:[2,16],78:[2,16]},{11:[2,17],16:[2,17],36:[2,17],37:[2,17],39:[2,17],41:[2,17],46:[2,17],49:[2,17],57:[2,17],62:[2,17],64:[2,17],67:[2,17],68:[2,17],69:[2,17],70:[2,17],71:[2,17],72:[2,17],73:[2,17],74:[2,17],75:[2,17],76:[2,17],77:[2,17],78:[2,17]},{11:[2,18],16:[2,18],36:[2,18],37:[2,18],39:[2,18],41:[2,18],46:[2,18],49:[2,18],57:[2,18],62:[2,18],64:[2,18],67:[2,18],68:[2,18],69:[2,18],70:[2,18],71:[2,18],72:[2,18],73:[2,18],74:[2,18],75:[2,18],76:[2,18],77:[2,18],78:[2,18]},{11:[2,19],15:[1,68],16:[2,19],36:[2,19],37:[2,19],39:[2,19],41:[2,19],46:[2,19],49:[2,19],57:[2,19],62:[2,19],64:[2,19],67:[2,19],68:[2,19],69:[2,19],70:[2,19],71:[2,19],72:[2,19],73:[2,19],74:[2,19],75:[2,19],76:[2,19],77:[2,19],78:[2,19]},{11:[2,20],16:[2,20],36:[2,20],37:[2,20],39:[2,20],41:[2,20],46:[2,20],49:[2,20],57:[2,20],62:[2,20],64:[2,20],67:[2,20],68:[2,20],69:[2,20],70:[2,20],71:[2,20],72:[2,20],73:[2,20],74:[2,20],75:[2,20],76:[2,20],77:[2,20],78:[2,20]},{11:[2,21],16:[2,21],36:[2,21],37:[2,21],39:[2,21],41:[2,21],46:[2,21],49:[2,21],57:[2,21],62:[2,21],64:[2,21],67:[2,21],68:[2,21],69:[2,21],70:[2,21],71:[2,21],72:[2,21],73:[2,21],74:[2,21],75:[2,21],76:[2,21],77:[2,21],78:[2,21]},{11:[2,22],16:[2,22],36:[2,22],37:[2,22],39:[2,22],41:[2,22],46:[2,22],49:[2,22],57:[2,22],62:[2,22],64:[2,22],67:[2,22],68:[2,22],69:[2,22],70:[2,22],71:[2,22],72:[2,22],73:[2,22],74:[2,22],75:[2,22],76:[2,22],77:[2,22],78:[2,22]},{11:[2,23],16:[2,23],36:[2,23],37:[2,23],39:[2,23],41:[2,23],46:[2,23],49:[2,23],57:[2,23],62:[2,23],64:[2,23],67:[2,23],68:[2,23],69:[2,23],70:[2,23],71:[2,23],72:[2,23],73:[2,23],74:[2,23],75:[2,23],76:[2,23],77:[2,23],78:[2,23]},{11:[2,24],16:[2,24],36:[2,24],37:[2,24],39:[2,24],41:[2,24],46:[2,24],49:[2,24],57:[2,24],62:[2,24],64:[2,24],67:[2,24],68:[2,24],69:[2,24],70:[2,24],71:[2,24],72:[2,24],73:[2,24],74:[2,24],75:[2,24],76:[2,24],77:[2,24],78:[2,24]},{11:[2,25],16:[2,25],36:[2,25],37:[2,25],39:[2,25],41:[2,25],46:[2,25],49:[2,25],57:[2,25],62:[2,25],64:[2,25],67:[2,25],68:[2,25],69:[2,25],70:[2,25],71:[2,25],72:[2,25],73:[2,25],74:[2,25],75:[2,25],76:[2,25],77:[2,25],78:[2,25]},{11:[2,26],16:[2,26],36:[2,26],37:[2,26],39:[2,26],41:[2,26],46:[2,26],49:[2,26],57:[2,26],62:[2,26],64:[2,26],67:[2,26],68:[2,26],69:[2,26],70:[2,26],71:[2,26],72:[2,26],73:[2,26],74:[2,26],75:[2,26],76:[2,26],77:[2,26],78:[2,26]},{11:[2,27],16:[2,27],36:[2,27],37:[2,27],39:[2,27],41:[2,27],46:[2,27],49:[2,27],57:[2,27],62:[2,27],64:[2,27],67:[2,27],68:[2,27],69:[2,27],70:[2,27],71:[2,27],72:[2,27],73:[2,27],74:[2,27],75:[2,27],76:[2,27],77:[2,27],78:[2,27]},{11:[2,28],15:[1,69],16:[2,28],36:[2,28],37:[2,28],39:[2,28],41:[2,28],46:[2,28],49:[2,28],57:[2,28],62:[2,28],64:[2,28],67:[2,28],68:[2,28],69:[2,28],70:[2,28],71:[2,28],72:[2,28],73:[2,28],74:[2,28],75:[2,28],76:[2,28],77:[2,28],78:[2,28]},{11:[2,29],16:[2,29],36:[2,29],37:[2,29],39:[2,29],41:[2,29],46:[2,29],49:[2,29],57:[2,29],62:[2,29],64:[2,29],67:[2,29],68:[2,29],69:[2,29],70:[2,29],71:[2,29],72:[2,29],73:[2,29],74:[2,29],75:[2,29],76:[2,29],77:[2,29],78:[2,29]},{11:[2,30],16:[2,30],36:[2,30],37:[2,30],39:[2,30],41:[2,30],46:[2,30],49:[2,30],57:[2,30],62:[2,30],64:[2,30],67:[2,30],68:[2,30],69:[2,30],70:[2,30],71:[2,30],72:[2,30],73:[2,30],74:[2,30],75:[2,30],76:[2,30],77:[2,30],78:[2,30]},{11:[2,31],16:[2,31],36:[2,31],37:[2,31],39:[2,31],41:[2,31],46:[2,31],49:[2,31],57:[2,31],62:[2,31],64:[2,31],67:[2,31],68:[2,31],69:[2,31],70:[2,31],71:[2,31],72:[2,31],73:[2,31],74:[2,31],75:[2,31],76:[2,31],77:[2,31],78:[2,31]},{10:71,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],38:70,44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{11:[2,44],16:[2,44],36:[2,44],37:[2,44],39:[2,44],41:[2,44],46:[2,44],49:[2,44],57:[2,44],62:[2,44],64:[2,44],67:[2,44],68:[2,44],69:[2,44],70:[2,44],71:[2,44],72:[2,44],73:[2,44],74:[2,44],75:[2,44],76:[2,44],77:[2,44],78:[2,44]},{11:[2,45],16:[2,45],36:[2,45],37:[2,45],39:[2,45],41:[2,45],46:[2,45],49:[2,45],57:[2,45],62:[2,45],64:[2,45],67:[2,45],68:[2,45],69:[2,45],70:[2,45],71:[2,45],72:[2,45],73:[2,45],74:[2,45],75:[2,45],76:[2,45],77:[2,45],78:[2,45]},{16:[1,72]},{13:[1,73]},{10:74,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{16:[1,83],49:[1,78],54:75,55:[1,76],58:77,59:79,60:80,61:81,62:[1,82]},{16:[1,86],51:84,52:85},{10:71,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],38:87,44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:71,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],38:88,44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:71,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],38:89,44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:71,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],38:90,44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:91,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:92,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{1:[2,1]},{5:[2,3],12:[2,3],13:[2,3],14:[2,3],16:[2,3],17:[2,3],19:[2,3],20:[2,3],21:[2,3],22:[2,3],37:[2,3],44:[2,3],45:[2,3],46:[2,3],47:[2,3],48:[2,3],50:[2,3],53:[2,3],55:[2,3],63:[2,3],65:[2,3],66:[2,3],68:[2,3],79:[2,3]},{5:[2,7],12:[2,7],13:[2,7],14:[2,7],16:[2,7],17:[2,7],19:[2,7],20:[2,7],21:[2,7],22:[2,7],37:[2,7],44:[2,7],45:[2,7],46:[2,7],47:[2,7],48:[2,7],50:[2,7],53:[2,7],55:[2,7],63:[2,7],65:[2,7],66:[2,7],68:[2,7],79:[2,7]},{10:93,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:71,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],38:94,39:[1,95],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{11:[2,73],15:[2,73],16:[2,73],36:[2,73],37:[2,73],39:[2,73],41:[2,73],46:[2,73],49:[2,73],57:[2,73],62:[2,73],64:[2,73],67:[2,73],68:[2,73],69:[2,73],70:[2,73],71:[2,73],72:[2,73],73:[2,73],74:[2,73],75:[2,73],76:[2,73],77:[2,73],78:[2,73]},{10:96,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:97,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:98,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:99,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:100,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:101,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:102,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:103,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:104,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:105,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:106,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:107,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:108,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{11:[1,109]},{10:110,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{15:[1,111]},{15:[1,112]},{10:113,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:114,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{39:[1,115],41:[1,116]},{24:50,36:[1,48],37:[1,49],39:[2,42],41:[2,42],46:[1,34],57:[2,42],62:[1,56],64:[2,42],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{11:[2,46],15:[2,46],16:[2,46],36:[2,46],37:[2,46],39:[2,46],41:[2,46],46:[2,46],49:[2,46],57:[2,46],62:[2,46],64:[2,46],67:[2,46],68:[2,46],69:[2,46],70:[2,46],71:[2,46],72:[2,46],73:[2,46],74:[2,46],75:[2,46],76:[2,46],77:[2,46],78:[2,46]},{11:[2,47],16:[2,47],36:[2,47],37:[2,47],39:[2,47],41:[2,47],46:[2,47],49:[2,47],57:[2,47],62:[2,47],64:[2,47],67:[2,47],68:[2,47],69:[2,47],70:[2,47],71:[2,47],72:[2,47],73:[2,47],74:[2,47],75:[2,47],76:[2,47],77:[2,47],78:[2,47]},{24:50,36:[1,48],37:[1,49],46:[1,34],49:[1,117],62:[1,56],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{11:[2,53],16:[2,53],36:[2,53],37:[2,53],39:[2,53],41:[2,53],46:[2,53],49:[2,53],57:[2,53],62:[2,53],64:[2,53],67:[2,53],68:[2,53],69:[2,53],70:[2,53],71:[2,53],72:[2,53],73:[2,53],74:[2,53],75:[2,53],76:[2,53],77:[2,53],78:[2,53]},{16:[1,83],49:[1,78],54:119,56:118,58:77,59:79,60:80,61:81,62:[1,82]},{49:[1,120]},{10:121,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{16:[1,83],49:[2,59],60:122,61:123,62:[1,82]},{49:[2,61]},{16:[2,62],49:[2,62],62:[2,62]},{16:[1,124]},{15:[1,126],16:[2,64],41:[1,125],49:[2,64],62:[2,64]},{16:[1,86],49:[1,127],52:128},{16:[2,50],49:[2,50]},{15:[1,129]},{41:[1,116],64:[1,130]},{41:[1,116],57:[1,131]},{41:[1,116],64:[1,132]},{41:[1,116],57:[1,133]},{11:[2,89],16:[2,89],24:50,36:[1,48],37:[1,49],39:[2,89],41:[2,89],46:[1,34],49:[2,89],57:[2,89],62:[2,89],64:[2,89],67:[2,89],68:[2,89],69:[1,53],70:[1,54],71:[1,55],72:[2,89],73:[2,89],74:[2,89],75:[2,89],76:[2,89],77:[2,89],78:[2,89]},{11:[2,90],16:[2,90],24:50,36:[1,48],37:[1,49],39:[2,90],41:[2,90],46:[1,34],49:[2,90],57:[2,90],62:[2,90],64:[2,90],67:[2,90],68:[2,90],69:[2,90],70:[2,90],71:[2,90],72:[2,90],73:[2,90],74:[2,90],75:[2,90],76:[2,90],77:[2,90],78:[2,90]},{11:[2,32],16:[2,32],24:50,36:[2,32],37:[1,49],39:[2,32],41:[2,32],46:[1,34],49:[2,32],57:[2,32],62:[2,32],64:[2,32],67:[2,32],68:[2,32],69:[2,32],70:[2,32],71:[2,32],72:[2,32],73:[2,32],74:[2,32],75:[2,32],76:[2,32],77:[2,32],78:[2,32]},{39:[1,134],41:[1,116]},{11:[2,34],16:[2,34],36:[2,34],37:[2,34],39:[2,34],41:[2,34],46:[2,34],49:[2,34],57:[2,34],62:[2,34],64:[2,34],67:[2,34],68:[2,34],69:[2,34],70:[2,34],71:[2,34],72:[2,34],73:[2,34],74:[2,34],75:[2,34],76:[2,34],77:[2,34],78:[2,34]},{11:[2,76],16:[2,76],24:50,36:[1,48],37:[1,49],39:[2,76],41:[2,76],46:[1,34],49:[2,76],57:[2,76],62:[2,76],64:[2,76],67:[2,76],68:[2,76],69:[1,53],70:[1,54],71:[1,55],72:[2,76],73:[2,76],74:[2,76],75:[2,76],76:[2,76],77:[2,76],78:[2,76]},{11:[2,77],16:[2,77],24:50,36:[1,48],37:[1,49],39:[2,77],41:[2,77],46:[1,34],49:[2,77],57:[2,77],62:[2,77],64:[2,77],67:[2,77],68:[2,77],69:[1,53],70:[1,54],71:[1,55],72:[2,77],73:[2,77],74:[2,77],75:[2,77],76:[2,77],77:[2,77],78:[2,77]},{11:[2,78],16:[2,78],24:50,36:[1,48],37:[1,49],39:[2,78],41:[2,78],46:[1,34],49:[2,78],57:[2,78],62:[2,78],64:[2,78],67:[2,78],68:[2,78],69:[2,78],70:[1,54],71:[2,78],72:[2,78],73:[2,78],74:[2,78],75:[2,78],76:[2,78],77:[2,78],78:[2,78]},{11:[2,79],16:[2,79],24:50,36:[1,48],37:[1,49],39:[2,79],41:[2,79],46:[1,34],49:[2,79],57:[2,79],62:[2,79],64:[2,79],67:[2,79],68:[2,79],69:[2,79],70:[2,79],71:[2,79],72:[2,79],73:[2,79],74:[2,79],75:[2,79],76:[2,79],77:[2,79],78:[2,79]},{11:[2,80],16:[2,80],24:50,36:[1,48],37:[1,49],39:[2,80],41:[2,80],46:[1,34],49:[2,80],57:[2,80],62:[2,80],64:[2,80],67:[2,80],68:[2,80],69:[2,80],70:[1,54],71:[2,80],72:[2,80],73:[2,80],74:[2,80],75:[2,80],76:[2,80],77:[2,80],78:[2,80]},{11:[2,81],16:[2,81],24:50,36:[1,48],37:[1,49],39:[2,81],41:[2,81],46:[1,34],49:[2,81],57:[2,81],62:[2,81],64:[2,81],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,81],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{11:[2,82],16:[2,82],24:50,36:[1,48],37:[1,49],39:[2,82],41:[2,82],46:[1,34],49:[2,82],57:[2,82],62:[1,56],64:[2,82],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,82],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{11:[2,83],16:[2,83],24:50,36:[1,48],37:[1,49],39:[2,83],41:[2,83],46:[1,34],49:[2,83],57:[2,83],62:[2,83],64:[2,83],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,83],73:[2,83],74:[2,83],75:[2,83],76:[2,83],77:[2,83],78:[2,83]},{11:[2,84],16:[2,84],24:50,36:[1,48],37:[1,49],39:[2,84],41:[2,84],46:[1,34],49:[2,84],57:[2,84],62:[2,84],64:[2,84],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,84],73:[2,84],74:[2,84],75:[2,84],76:[2,84],77:[2,84],78:[2,84]},{11:[2,85],16:[2,85],24:50,36:[1,48],37:[1,49],39:[2,85],41:[2,85],46:[1,34],49:[2,85],57:[2,85],62:[2,85],64:[2,85],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,85],73:[2,85],74:[2,85],75:[2,85],76:[2,85],77:[2,85],78:[2,85]},{11:[2,86],16:[2,86],24:50,36:[1,48],37:[1,49],39:[2,86],41:[2,86],46:[1,34],49:[2,86],57:[2,86],62:[2,86],64:[2,86],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,86],73:[2,86],74:[2,86],75:[2,86],76:[2,86],77:[2,86],78:[2,86]},{11:[2,87],16:[2,87],24:50,36:[1,48],37:[1,49],39:[2,87],41:[2,87],46:[1,34],49:[2,87],57:[2,87],62:[2,87],64:[2,87],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,87],73:[2,87],74:[2,87],75:[2,87],76:[2,87],77:[2,87],78:[2,87]},{11:[2,88],16:[2,88],24:50,36:[1,48],37:[1,49],39:[2,88],41:[2,88],46:[1,34],49:[2,88],57:[2,88],62:[2,88],64:[2,88],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,88],73:[2,88],74:[2,88],75:[2,88],76:[2,88],77:[2,88],78:[2,88]},{5:[2,8],12:[2,8],13:[2,8],14:[2,8],16:[2,8],17:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],37:[2,8],44:[2,8],45:[2,8],46:[2,8],47:[2,8],48:[2,8],50:[2,8],53:[2,8],55:[2,8],63:[2,8],65:[2,8],66:[2,8],68:[2,8],79:[2,8]},{11:[1,135],24:50,36:[1,48],37:[1,49],46:[1,34],62:[1,56],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{10:136,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{18:137,53:[1,37]},{11:[2,74],16:[2,74],24:50,36:[1,48],37:[1,49],39:[2,74],41:[2,74],46:[1,34],49:[2,74],57:[2,74],62:[1,56],64:[2,74],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{11:[2,75],16:[2,75],24:50,36:[1,48],37:[1,49],39:[2,75],41:[2,75],46:[1,34],49:[2,75],57:[2,75],62:[1,56],64:[2,75],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{11:[2,35],16:[2,35],36:[2,35],37:[2,35],39:[2,35],41:[2,35],46:[2,35],49:[2,35],57:[2,35],62:[2,35],64:[2,35],67:[2,35],68:[2,35],69:[2,35],70:[2,35],71:[2,35],72:[2,35],73:[2,35],74:[2,35],75:[2,35],76:[2,35],77:[2,35],78:[2,35]},{10:138,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:139,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{41:[1,141],57:[1,140]},{41:[2,55],57:[2,55]},{10:142,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{11:[2,58],16:[2,58],24:50,36:[1,48],37:[1,49],39:[2,58],41:[2,58],46:[1,34],49:[2,58],57:[2,58],62:[1,56],64:[2,58],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{49:[2,60]},{16:[2,63],49:[2,63],62:[2,63]},{49:[2,68]},{16:[2,65],49:[2,65],62:[2,65]},{10:143,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{10:144,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{16:[2,51],49:[2,51]},{10:146,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],40:145,44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{11:[2,69],16:[2,69],36:[2,69],37:[2,69],39:[2,69],41:[2,69],46:[2,69],49:[2,69],57:[2,69],62:[2,69],64:[2,69],67:[2,69],68:[2,69],69:[2,69],70:[2,69],71:[2,69],72:[2,69],73:[2,69],74:[2,69],75:[2,69],76:[2,69],77:[2,69],78:[2,69]},{11:[2,70],16:[2,70],36:[2,70],37:[2,70],39:[2,70],41:[2,70],46:[2,70],49:[2,70],57:[2,70],62:[2,70],64:[2,70],67:[2,70],68:[2,70],69:[2,70],70:[2,70],71:[2,70],72:[2,70],73:[2,70],74:[2,70],75:[2,70],76:[2,70],77:[2,70],78:[2,70]},{11:[2,71],16:[2,71],36:[2,71],37:[2,71],39:[2,71],41:[2,71],46:[2,71],49:[2,71],57:[2,71],62:[2,71],64:[2,71],67:[2,71],68:[2,71],69:[2,71],70:[2,71],71:[2,71],72:[2,71],73:[2,71],74:[2,71],75:[2,71],76:[2,71],77:[2,71],78:[2,71]},{11:[2,72],16:[2,72],36:[2,72],37:[2,72],39:[2,72],41:[2,72],46:[2,72],49:[2,72],57:[2,72],62:[2,72],64:[2,72],67:[2,72],68:[2,72],69:[2,72],70:[2,72],71:[2,72],72:[2,72],73:[2,72],74:[2,72],75:[2,72],76:[2,72],77:[2,72],78:[2,72]},{11:[2,33],16:[2,33],36:[2,33],37:[2,33],39:[2,33],41:[2,33],46:[2,33],49:[2,33],57:[2,33],62:[2,33],64:[2,33],67:[2,33],68:[2,33],69:[2,33],70:[2,33],71:[2,33],72:[2,33],73:[2,33],74:[2,33],75:[2,33],76:[2,33],77:[2,33],78:[2,33]},{5:[2,9],12:[2,9],13:[2,9],14:[2,9],16:[2,9],17:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],37:[2,9],44:[2,9],45:[2,9],46:[2,9],47:[2,9],48:[2,9],50:[2,9],53:[2,9],55:[2,9],63:[2,9],65:[2,9],66:[2,9],68:[2,9],79:[2,9]},{11:[1,147],24:50,36:[1,48],37:[1,49],46:[1,34],62:[1,56],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{11:[1,148]},{24:50,36:[1,48],37:[1,49],39:[2,43],41:[2,43],46:[1,34],57:[2,43],62:[1,56],64:[2,43],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{24:50,36:[1,48],37:[1,49],41:[1,149],46:[1,34],62:[1,56],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{11:[2,54],16:[2,54],36:[2,54],37:[2,54],39:[2,54],41:[2,54],46:[2,54],49:[2,54],57:[2,54],62:[2,54],64:[2,54],67:[2,54],68:[2,54],69:[2,54],70:[2,54],71:[2,54],72:[2,54],73:[2,54],74:[2,54],75:[2,54],76:[2,54],77:[2,54],78:[2,54]},{16:[1,83],49:[1,78],54:150,58:77,59:79,60:80,61:81,62:[1,82]},{11:[2,57],16:[2,57],24:50,36:[1,48],37:[1,49],39:[2,57],41:[2,57],46:[1,34],49:[2,57],57:[2,57],62:[1,56],64:[2,57],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{16:[2,66],24:50,36:[1,48],37:[1,49],41:[1,151],46:[1,34],49:[2,66],62:[1,56],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{11:[2,49],16:[2,49],24:50,36:[1,48],37:[1,49],39:[2,49],41:[2,49],46:[1,34],49:[2,49],57:[2,49],62:[1,56],64:[2,49],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{16:[2,52],49:[2,52]},{16:[2,36],24:50,36:[1,48],37:[1,49],41:[1,152],46:[1,34],49:[2,36],62:[1,56],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{5:[2,10],12:[2,10],13:[2,10],14:[2,10],16:[2,10],17:[2,10],19:[2,10],20:[2,10],21:[2,10],22:[2,10],37:[2,10],44:[2,10],45:[2,10],46:[2,10],47:[2,10],48:[2,10],50:[2,10],53:[2,10],55:[2,10],63:[2,10],65:[2,10],66:[2,10],68:[2,10],79:[2,10]},{5:[2,11],12:[2,11],13:[2,11],14:[2,11],16:[2,11],17:[2,11],19:[2,11],20:[2,11],21:[2,11],22:[2,11],37:[2,11],44:[2,11],45:[2,11],46:[2,11],47:[2,11],48:[2,11],50:[2,11],53:[2,11],55:[2,11],63:[2,11],65:[2,11],66:[2,11],68:[2,11],79:[2,11]},{10:153,13:[1,11],16:[1,18],18:21,19:[1,12],20:[1,13],21:[1,14],22:[1,15],23:16,24:17,25:19,26:20,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,35:30,37:[1,31],44:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],50:[1,38],53:[1,37],55:[1,40],63:[1,39],65:[1,41],66:[1,42],68:[1,43],79:[1,44]},{41:[2,56],57:[2,56]},{16:[2,67],49:[2,67],62:[2,67]},{16:[2,37],49:[2,37]},{11:[2,48],16:[2,48],24:50,36:[1,48],37:[1,49],39:[2,48],41:[2,48],46:[1,34],49:[2,48],57:[2,48],62:[1,56],64:[2,48],67:[1,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]}],
defaultActions: {45:[2,1],80:[2,61],122:[2,60],124:[2,68]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 13
break;
case 1:return 19
break;
case 2:return 20
break;
case 3:/* ignore comment */
break;
case 4:/* ignore comment */
break;
case 5:/* ignore whitespace */
break;
case 6:return 21
break;
case 7:return 12
break;
case 8:return 47
break;
case 9:return 14
break;
case 10:return 17
break;
case 11:return 53
break;
case 12:return 50
break;
case 13:return 48
break;
case 14:return 44
break;
case 15:return 45
break;
case 16:return 22
break;
case 17:return 16
break;
case 18:return '\'('
break;
case 19:return 37
break;
case 20:return 39
break;
case 21:return 65
break;
case 22:return 63
break;
case 23:return 64
break;
case 24:return 66
break;
case 25:return 55
break;
case 26:return 57
break;
case 27:return 62
break;
case 28:return 67
break;
case 29:return 68
break;
case 30:return 69
break;
case 31:return 70
break;
case 32:return 71
break;
case 33:return 36
break;
case 34:return 62
break;
case 35:return 72
break;
case 36:return 79
break;
case 37:return 11
break;
case 38:return 41
break;
case 39:return 46
break;
case 40:return 75
break;
case 41:return 76
break;
case 42:return 73
break;
case 43:return 74
break;
case 44:return 77
break;
case 45:return 78
break;
case 46:return 15
break;
case 47:return 49
break;
case 48:return 36
break;
case 49:return '#'
break;
case 50:return '~'
break;
case 51:return 5
break;
}
},
rules: [/^(?:"(?:[^\"\\]|\\"|\\\\)*")/,/^(?:\/(?:[^\/\\]|\\\/|\\\\)*\/[gi]+)/,/^(?:`(?:[^\`]|``)*`)/,/^(?:\/\/[^\n]+\n)/,/^(?:\/\*[^]+?\*\/)/,/^(?:\s+)/,/^(?:-?\d+(?:\.\d*(?:[eE]-?\d+)?|[eE]-?\d+)?)/,/^(?:module\b)/,/^(?:import\b)/,/^(?:export\b)/,/^(?:type\b)/,/^(?:fn\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:nil\b)/,/^(?:\w+)/,/^(?:'\()/,/^(?:\()/,/^(?:\))/,/^(?:#\{)/,/^(?:\{)/,/^(?:\})/,/^(?:#\[)/,/^(?:\[)/,/^(?:\])/,/^(?:&)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\^)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?::)/,/^(?:\^)/,/^(?:#)/,/^(?:~)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}