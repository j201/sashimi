/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"statements":4,"EOF":5,"statement":6,"moduleStatement":7,"exportStatement":8,"expr":9,";":10,"module":11,"moduleIdentifier":12,"identifier":13,"identifierWithPeriods":14,"export":15,"string":16,"regex":17,"js":18,"number":19,"nil":20,"boolean":21,"keywordLiteral":22,"importExpr":23,"ifExpr":24,"fnExpr":25,"letExpr":26,"map":27,"list":28,"set":29,"bag":30,"mapAccess":31,"binaryOperation":32,"unaryOperation":33,"assignment":34,".":35,"(":36,"delimitedExprs":37,")":38,"exprOptionalComma":39,",":40,"exprsOptionalComma":41,"separatedExprs":42,"true":43,"false":44,"keyword":45,"import":46,"if":47,":":48,"let":49,"letBindings":50,"letBinding":51,"=":52,"fn":53,"fnBodies":54,"fnBody":55,"fnBindings":56,"nonRestParams":57,"restParam":58,"nonRestParam":59,"&":60,"{":61,"}":62,"[":63,"]":64,"#{":65,"#[":66,"+":67,"-":68,"/":69,"*":70,"|":71,"<":72,">":73,"<=":74,">=":75,"==":76,"!=":77,"!":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",11:"module",13:"identifier",14:"identifierWithPeriods",15:"export",16:"string",17:"regex",18:"js",19:"number",20:"nil",35:".",36:"(",38:")",40:",",43:"true",44:"false",45:"keyword",46:"import",47:"if",48:":",49:"let",52:"=",53:"fn",60:"&",61:"{",62:"}",63:"[",64:"]",65:"#{",66:"#[",67:"+",68:"-",69:"/",70:"*",71:"|",72:"<",73:">",74:"<=",75:">=",76:"==",77:"!=",78:"!"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,2],[7,3],[12,1],[12,1],[8,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,4],[9,3],[39,1],[39,2],[41,1],[41,2],[42,2],[42,3],[37,1],[37,3],[21,1],[21,1],[22,1],[23,2],[24,6],[26,4],[50,1],[50,2],[51,3],[25,2],[54,1],[54,3],[55,3],[56,1],[56,2],[57,1],[57,2],[59,1],[59,2],[59,3],[59,4],[58,2],[27,3],[28,3],[29,3],[30,3],[31,2],[34,3],[34,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[33,2],[33,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = [$$[$0]] 
break;
case 3: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = { type: 'module', name: $$[$0-1] } 
break;
case 10: this.$ = { type: 'export', value: $$[$0-1] } 
break;
case 11: this.$ = { type: 'string', value: yytext.slice(1, -1) } 
break;
case 12: this.$ = { type: 'regex', value: yytext } 
break;
case 13: this.$ = { type: 'js', value: yytext.slice(1, -1) } 
break;
case 14: this.$ = { type: 'number', value: Number(yytext) } 
break;
case 15: this.$ = { type: 'nil' } 
break;
case 18: this.$ = { type: 'identifier', value: yytext } 
break;
case 31: this.$ = { type: "dotExpression", caller: $$[$0-2], function: $$[$0] } 
break;
case 32: this.$ = { type: 'functionCall', function: $$[$0-3], arguments: $$[$0-1] } 
break;
case 33: this.$ = { type: 'exprList', value: $$[$0-1] } 
break;
case 36: this.$ = [$$[$0]] 
break;
case 37: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 38: this.$ = [$$[$0-1]] 
break;
case 39: $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 40: this.$ = [$$[$0]] 
break;
case 41: $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 42: this.$ = { type: 'boolean', value: 'true' }; 
break;
case 43: this.$ = { type: 'boolean', value: 'false' }; 
break;
case 44: this.$ = { type: 'keyword', value: yytext.slice(1) } 
break;
case 45: this.$ = { type: 'import', name: $$[$0] } 
break;
case 46: this.$ = { type: 'if', condition: $$[$0-4], consequent: $$[$0-2], alternative: $$[$0] } 
break;
case 47: this.$ = { type: 'let', bindings: $$[$0-2], value: $$[$0] } 
break;
case 48: this.$ = [$$[$0]]; 
break;
case 49: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 50: this.$ = { name: $$[$0-2], value: $$[$0-1] } 
break;
case 51: this.$ = { type: 'fn', bodies: $$[$0] } 
break;
case 52: this.$ = [$$[$0]] 
break;
case 53: $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 54: this.$ = { bindings: $$[$0-2], value: $$[$0] } 
break;
case 55: this.$ = $$[$0] 
break;
case 56: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 57: this.$ = [$$[$0]] 
break;
case 58: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 59: this.$ = { name: $$[$0] } 
break;
case 60: this.$ = { name: $$[$0-1] } 
break;
case 61: this.$ = { name: $$[$0-2], default: $$[$0] } 
break;
case 62: this.$ = { name: $$[$0-3], default: $$[$0-1] } 
break;
case 63: this.$ = { name: $$[$0], rest: true } 
break;
case 64: this.$ = { type: 'map', arguments: $$[$0-1] } 
break;
case 65: this.$ = { type: 'list', arguments: $$[$0-1] } 
break;
case 66: this.$ = { type: 'set', arguments: $$[$0-1] } 
break;
case 67: this.$ = { type: 'bag', arguments: $$[$0-1] } 
break;
case 68: this.$ = { type: 'mapAccess', map: $$[$0-1], key: $$[$0] } 
break;
case 69: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 70: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 71: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 72: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 73: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 74: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 75: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 76: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 77: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 78: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 79: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 80: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 81: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 82: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 83: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
case 84: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,11:[1,7],13:[1,16],15:[1,8],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{1:[3]},{5:[1,43],6:44,7:4,8:5,9:6,11:[1,7],13:[1,16],15:[1,8],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{5:[2,2],11:[2,2],13:[2,2],15:[2,2],16:[2,2],17:[2,2],18:[2,2],19:[2,2],20:[2,2],36:[2,2],43:[2,2],44:[2,2],45:[2,2],46:[2,2],47:[2,2],49:[2,2],53:[2,2],61:[2,2],63:[2,2],65:[2,2],66:[2,2],68:[2,2],78:[2,2]},{5:[2,4],11:[2,4],13:[2,4],15:[2,4],16:[2,4],17:[2,4],18:[2,4],19:[2,4],20:[2,4],36:[2,4],43:[2,4],44:[2,4],45:[2,4],46:[2,4],47:[2,4],49:[2,4],53:[2,4],61:[2,4],63:[2,4],65:[2,4],66:[2,4],68:[2,4],78:[2,4]},{5:[2,5],11:[2,5],13:[2,5],15:[2,5],16:[2,5],17:[2,5],18:[2,5],19:[2,5],20:[2,5],36:[2,5],43:[2,5],44:[2,5],45:[2,5],46:[2,5],47:[2,5],49:[2,5],53:[2,5],61:[2,5],63:[2,5],65:[2,5],66:[2,5],68:[2,5],78:[2,5]},{10:[1,45],22:48,35:[1,46],36:[1,47],45:[1,32],60:[1,53],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{12:61,13:[1,62],14:[1,63]},{9:64,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{10:[2,11],13:[2,11],35:[2,11],36:[2,11],38:[2,11],40:[2,11],45:[2,11],48:[2,11],60:[2,11],62:[2,11],64:[2,11],67:[2,11],68:[2,11],69:[2,11],70:[2,11],71:[2,11],72:[2,11],73:[2,11],74:[2,11],75:[2,11],76:[2,11],77:[2,11]},{10:[2,12],13:[2,12],35:[2,12],36:[2,12],38:[2,12],40:[2,12],45:[2,12],48:[2,12],60:[2,12],62:[2,12],64:[2,12],67:[2,12],68:[2,12],69:[2,12],70:[2,12],71:[2,12],72:[2,12],73:[2,12],74:[2,12],75:[2,12],76:[2,12],77:[2,12]},{10:[2,13],13:[2,13],35:[2,13],36:[2,13],38:[2,13],40:[2,13],45:[2,13],48:[2,13],60:[2,13],62:[2,13],64:[2,13],67:[2,13],68:[2,13],69:[2,13],70:[2,13],71:[2,13],72:[2,13],73:[2,13],74:[2,13],75:[2,13],76:[2,13],77:[2,13]},{10:[2,14],13:[2,14],35:[2,14],36:[2,14],38:[2,14],40:[2,14],45:[2,14],48:[2,14],60:[2,14],62:[2,14],64:[2,14],67:[2,14],68:[2,14],69:[2,14],70:[2,14],71:[2,14],72:[2,14],73:[2,14],74:[2,14],75:[2,14],76:[2,14],77:[2,14]},{10:[2,15],13:[2,15],35:[2,15],36:[2,15],38:[2,15],40:[2,15],45:[2,15],48:[2,15],60:[2,15],62:[2,15],64:[2,15],67:[2,15],68:[2,15],69:[2,15],70:[2,15],71:[2,15],72:[2,15],73:[2,15],74:[2,15],75:[2,15],76:[2,15],77:[2,15]},{10:[2,16],13:[2,16],35:[2,16],36:[2,16],38:[2,16],40:[2,16],45:[2,16],48:[2,16],60:[2,16],62:[2,16],64:[2,16],67:[2,16],68:[2,16],69:[2,16],70:[2,16],71:[2,16],72:[2,16],73:[2,16],74:[2,16],75:[2,16],76:[2,16],77:[2,16]},{10:[2,17],13:[2,17],35:[2,17],36:[2,17],38:[2,17],40:[2,17],45:[2,17],48:[2,17],60:[2,17],62:[2,17],64:[2,17],67:[2,17],68:[2,17],69:[2,17],70:[2,17],71:[2,17],72:[2,17],73:[2,17],74:[2,17],75:[2,17],76:[2,17],77:[2,17]},{10:[2,18],13:[2,18],35:[2,18],36:[2,18],38:[2,18],40:[2,18],45:[2,18],48:[2,18],52:[1,65],60:[2,18],62:[2,18],64:[2,18],67:[2,18],68:[2,18],69:[2,18],70:[2,18],71:[2,18],72:[2,18],73:[2,18],74:[2,18],75:[2,18],76:[2,18],77:[2,18]},{10:[2,19],13:[2,19],35:[2,19],36:[2,19],38:[2,19],40:[2,19],45:[2,19],48:[2,19],60:[2,19],62:[2,19],64:[2,19],67:[2,19],68:[2,19],69:[2,19],70:[2,19],71:[2,19],72:[2,19],73:[2,19],74:[2,19],75:[2,19],76:[2,19],77:[2,19]},{10:[2,20],13:[2,20],35:[2,20],36:[2,20],38:[2,20],40:[2,20],45:[2,20],48:[2,20],60:[2,20],62:[2,20],64:[2,20],67:[2,20],68:[2,20],69:[2,20],70:[2,20],71:[2,20],72:[2,20],73:[2,20],74:[2,20],75:[2,20],76:[2,20],77:[2,20]},{10:[2,21],13:[2,21],35:[2,21],36:[2,21],38:[2,21],40:[2,21],45:[2,21],48:[2,21],60:[2,21],62:[2,21],64:[2,21],67:[2,21],68:[2,21],69:[2,21],70:[2,21],71:[2,21],72:[2,21],73:[2,21],74:[2,21],75:[2,21],76:[2,21],77:[2,21]},{10:[2,22],13:[2,22],35:[2,22],36:[2,22],38:[2,22],40:[2,22],45:[2,22],48:[2,22],60:[2,22],62:[2,22],64:[2,22],67:[2,22],68:[2,22],69:[2,22],70:[2,22],71:[2,22],72:[2,22],73:[2,22],74:[2,22],75:[2,22],76:[2,22],77:[2,22]},{10:[2,23],13:[2,23],35:[2,23],36:[2,23],38:[2,23],40:[2,23],45:[2,23],48:[2,23],60:[2,23],62:[2,23],64:[2,23],67:[2,23],68:[2,23],69:[2,23],70:[2,23],71:[2,23],72:[2,23],73:[2,23],74:[2,23],75:[2,23],76:[2,23],77:[2,23]},{10:[2,24],13:[2,24],35:[2,24],36:[2,24],38:[2,24],40:[2,24],45:[2,24],48:[2,24],60:[2,24],62:[2,24],64:[2,24],67:[2,24],68:[2,24],69:[2,24],70:[2,24],71:[2,24],72:[2,24],73:[2,24],74:[2,24],75:[2,24],76:[2,24],77:[2,24]},{10:[2,25],13:[2,25],35:[2,25],36:[2,25],38:[2,25],40:[2,25],45:[2,25],48:[2,25],60:[2,25],62:[2,25],64:[2,25],67:[2,25],68:[2,25],69:[2,25],70:[2,25],71:[2,25],72:[2,25],73:[2,25],74:[2,25],75:[2,25],76:[2,25],77:[2,25]},{10:[2,26],13:[2,26],35:[2,26],36:[2,26],38:[2,26],40:[2,26],45:[2,26],48:[2,26],60:[2,26],62:[2,26],64:[2,26],67:[2,26],68:[2,26],69:[2,26],70:[2,26],71:[2,26],72:[2,26],73:[2,26],74:[2,26],75:[2,26],76:[2,26],77:[2,26]},{10:[2,27],13:[2,27],35:[2,27],36:[2,27],38:[2,27],40:[2,27],45:[2,27],48:[2,27],52:[1,66],60:[2,27],62:[2,27],64:[2,27],67:[2,27],68:[2,27],69:[2,27],70:[2,27],71:[2,27],72:[2,27],73:[2,27],74:[2,27],75:[2,27],76:[2,27],77:[2,27]},{10:[2,28],13:[2,28],35:[2,28],36:[2,28],38:[2,28],40:[2,28],45:[2,28],48:[2,28],60:[2,28],62:[2,28],64:[2,28],67:[2,28],68:[2,28],69:[2,28],70:[2,28],71:[2,28],72:[2,28],73:[2,28],74:[2,28],75:[2,28],76:[2,28],77:[2,28]},{10:[2,29],13:[2,29],35:[2,29],36:[2,29],38:[2,29],40:[2,29],45:[2,29],48:[2,29],60:[2,29],62:[2,29],64:[2,29],67:[2,29],68:[2,29],69:[2,29],70:[2,29],71:[2,29],72:[2,29],73:[2,29],74:[2,29],75:[2,29],76:[2,29],77:[2,29]},{10:[2,30],13:[2,30],35:[2,30],36:[2,30],38:[2,30],40:[2,30],45:[2,30],48:[2,30],60:[2,30],62:[2,30],64:[2,30],67:[2,30],68:[2,30],69:[2,30],70:[2,30],71:[2,30],72:[2,30],73:[2,30],74:[2,30],75:[2,30],76:[2,30],77:[2,30]},{9:68,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],37:67,43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{10:[2,42],13:[2,42],35:[2,42],36:[2,42],38:[2,42],40:[2,42],45:[2,42],48:[2,42],60:[2,42],62:[2,42],64:[2,42],67:[2,42],68:[2,42],69:[2,42],70:[2,42],71:[2,42],72:[2,42],73:[2,42],74:[2,42],75:[2,42],76:[2,42],77:[2,42]},{10:[2,43],13:[2,43],35:[2,43],36:[2,43],38:[2,43],40:[2,43],45:[2,43],48:[2,43],60:[2,43],62:[2,43],64:[2,43],67:[2,43],68:[2,43],69:[2,43],70:[2,43],71:[2,43],72:[2,43],73:[2,43],74:[2,43],75:[2,43],76:[2,43],77:[2,43]},{10:[2,44],13:[2,44],35:[2,44],36:[2,44],38:[2,44],40:[2,44],45:[2,44],48:[2,44],52:[2,44],60:[2,44],62:[2,44],64:[2,44],67:[2,44],68:[2,44],69:[2,44],70:[2,44],71:[2,44],72:[2,44],73:[2,44],74:[2,44],75:[2,44],76:[2,44],77:[2,44]},{12:69,13:[1,62],14:[1,63]},{9:70,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{13:[1,76],54:71,55:72,56:73,57:74,59:75},{13:[1,79],50:77,51:78},{9:68,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],37:80,43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:68,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],37:81,43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:68,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],37:82,43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:68,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],37:83,43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:84,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:85,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{1:[2,1]},{5:[2,3],11:[2,3],13:[2,3],15:[2,3],16:[2,3],17:[2,3],18:[2,3],19:[2,3],20:[2,3],36:[2,3],43:[2,3],44:[2,3],45:[2,3],46:[2,3],47:[2,3],49:[2,3],53:[2,3],61:[2,3],63:[2,3],65:[2,3],66:[2,3],68:[2,3],78:[2,3]},{5:[2,6],11:[2,6],13:[2,6],15:[2,6],16:[2,6],17:[2,6],18:[2,6],19:[2,6],20:[2,6],36:[2,6],43:[2,6],44:[2,6],45:[2,6],46:[2,6],47:[2,6],49:[2,6],53:[2,6],61:[2,6],63:[2,6],65:[2,6],66:[2,6],68:[2,6],78:[2,6]},{9:86,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:68,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],37:87,43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{10:[2,68],13:[2,68],35:[2,68],36:[2,68],38:[2,68],40:[2,68],45:[2,68],48:[2,68],52:[2,68],60:[2,68],62:[2,68],64:[2,68],67:[2,68],68:[2,68],69:[2,68],70:[2,68],71:[2,68],72:[2,68],73:[2,68],74:[2,68],75:[2,68],76:[2,68],77:[2,68]},{9:88,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:89,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:90,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:91,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:92,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:93,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:94,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:95,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:96,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:97,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:98,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:99,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{10:[1,100]},{10:[2,8],13:[2,8],35:[2,8],36:[2,8],38:[2,8],40:[2,8],45:[2,8],48:[2,8],60:[2,8],62:[2,8],64:[2,8],67:[2,8],68:[2,8],69:[2,8],70:[2,8],71:[2,8],72:[2,8],73:[2,8],74:[2,8],75:[2,8],76:[2,8],77:[2,8]},{10:[2,9],13:[2,9],35:[2,9],36:[2,9],38:[2,9],40:[2,9],45:[2,9],48:[2,9],60:[2,9],62:[2,9],64:[2,9],67:[2,9],68:[2,9],69:[2,9],70:[2,9],71:[2,9],72:[2,9],73:[2,9],74:[2,9],75:[2,9],76:[2,9],77:[2,9]},{10:[1,101],22:48,35:[1,46],36:[1,47],45:[1,32],60:[1,53],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{9:102,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:103,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{38:[1,104],40:[1,105]},{22:48,35:[1,46],36:[1,47],38:[2,40],40:[2,40],45:[1,32],60:[1,53],62:[2,40],64:[2,40],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{10:[2,45],13:[2,45],35:[2,45],36:[2,45],38:[2,45],40:[2,45],45:[2,45],48:[2,45],60:[2,45],62:[2,45],64:[2,45],67:[2,45],68:[2,45],69:[2,45],70:[2,45],71:[2,45],72:[2,45],73:[2,45],74:[2,45],75:[2,45],76:[2,45],77:[2,45]},{22:48,35:[1,46],36:[1,47],45:[1,32],48:[1,106],60:[1,53],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{10:[2,51],13:[2,51],35:[2,51],36:[2,51],38:[2,51],40:[2,51],45:[2,51],48:[2,51],60:[2,51],62:[2,51],64:[2,51],67:[2,51],68:[2,51],69:[2,51],70:[2,51],71:[2,51],72:[2,51],73:[2,51],74:[2,51],75:[2,51],76:[2,51],77:[2,51]},{10:[2,52],13:[2,52],35:[2,52],36:[2,52],38:[2,52],40:[2,52],45:[2,52],48:[2,52],60:[2,52],62:[2,52],64:[2,52],67:[2,52],68:[2,52],69:[2,52],70:[2,52],71:[2,52],72:[2,52],73:[2,52],74:[2,52],75:[2,52],76:[2,52],77:[2,52]},{48:[1,108]},{13:[1,76],48:[2,55],58:109,59:110,60:[1,111]},{13:[2,57],48:[2,57],60:[2,57]},{13:[2,59],40:[1,112],48:[2,59],52:[1,113],60:[2,59]},{13:[1,79],48:[1,114],51:115},{13:[2,48],48:[2,48]},{52:[1,116]},{40:[1,105],62:[1,117]},{40:[1,105],64:[1,118]},{40:[1,105],62:[1,119]},{40:[1,105],64:[1,120]},{10:[2,83],13:[2,83],22:48,35:[1,46],36:[1,47],38:[2,83],40:[2,83],45:[1,32],48:[2,83],60:[2,83],62:[2,83],64:[2,83],67:[2,83],68:[2,83],69:[1,51],70:[1,52],71:[2,83],72:[2,83],73:[2,83],74:[2,83],75:[2,83],76:[2,83],77:[2,83]},{10:[2,84],13:[2,84],22:48,35:[1,46],36:[1,47],38:[2,84],40:[2,84],45:[1,32],48:[2,84],60:[2,84],62:[2,84],64:[2,84],67:[2,84],68:[2,84],69:[2,84],70:[2,84],71:[2,84],72:[2,84],73:[2,84],74:[2,84],75:[2,84],76:[2,84],77:[2,84]},{10:[2,31],13:[2,31],22:48,35:[2,31],36:[2,31],38:[2,31],40:[2,31],45:[1,32],48:[2,31],60:[2,31],62:[2,31],64:[2,31],67:[2,31],68:[2,31],69:[2,31],70:[2,31],71:[2,31],72:[2,31],73:[2,31],74:[2,31],75:[2,31],76:[2,31],77:[2,31]},{38:[1,121],40:[1,105]},{10:[2,71],13:[2,71],22:48,35:[1,46],36:[1,47],38:[2,71],40:[2,71],45:[1,32],48:[2,71],60:[2,71],62:[2,71],64:[2,71],67:[2,71],68:[2,71],69:[1,51],70:[1,52],71:[2,71],72:[2,71],73:[2,71],74:[2,71],75:[2,71],76:[2,71],77:[2,71]},{10:[2,72],13:[2,72],22:48,35:[1,46],36:[1,47],38:[2,72],40:[2,72],45:[1,32],48:[2,72],60:[2,72],62:[2,72],64:[2,72],67:[2,72],68:[2,72],69:[1,51],70:[1,52],71:[2,72],72:[2,72],73:[2,72],74:[2,72],75:[2,72],76:[2,72],77:[2,72]},{10:[2,73],13:[2,73],22:48,35:[1,46],36:[1,47],38:[2,73],40:[2,73],45:[1,32],48:[2,73],60:[2,73],62:[2,73],64:[2,73],67:[2,73],68:[2,73],69:[2,73],70:[2,73],71:[2,73],72:[2,73],73:[2,73],74:[2,73],75:[2,73],76:[2,73],77:[2,73]},{10:[2,74],13:[2,74],22:48,35:[1,46],36:[1,47],38:[2,74],40:[2,74],45:[1,32],48:[2,74],60:[2,74],62:[2,74],64:[2,74],67:[2,74],68:[2,74],69:[2,74],70:[2,74],71:[2,74],72:[2,74],73:[2,74],74:[2,74],75:[2,74],76:[2,74],77:[2,74]},{10:[2,75],13:[2,75],22:48,35:[1,46],36:[1,47],38:[2,75],40:[2,75],45:[1,32],48:[2,75],60:[2,75],62:[2,75],64:[2,75],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[2,75],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{10:[2,76],13:[2,76],22:48,35:[1,46],36:[1,47],38:[2,76],40:[2,76],45:[1,32],48:[2,76],60:[1,53],62:[2,76],64:[2,76],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[2,76],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{10:[2,77],13:[2,77],22:48,35:[1,46],36:[1,47],38:[2,77],40:[2,77],45:[1,32],48:[2,77],60:[2,77],62:[2,77],64:[2,77],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[2,77],72:[2,77],73:[2,77],74:[2,77],75:[2,77],76:[2,77],77:[2,77]},{10:[2,78],13:[2,78],22:48,35:[1,46],36:[1,47],38:[2,78],40:[2,78],45:[1,32],48:[2,78],60:[2,78],62:[2,78],64:[2,78],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[2,78],72:[2,78],73:[2,78],74:[2,78],75:[2,78],76:[2,78],77:[2,78]},{10:[2,79],13:[2,79],22:48,35:[1,46],36:[1,47],38:[2,79],40:[2,79],45:[1,32],48:[2,79],60:[2,79],62:[2,79],64:[2,79],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[2,79],72:[2,79],73:[2,79],74:[2,79],75:[2,79],76:[2,79],77:[2,79]},{10:[2,80],13:[2,80],22:48,35:[1,46],36:[1,47],38:[2,80],40:[2,80],45:[1,32],48:[2,80],60:[2,80],62:[2,80],64:[2,80],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[2,80],72:[2,80],73:[2,80],74:[2,80],75:[2,80],76:[2,80],77:[2,80]},{10:[2,81],13:[2,81],22:48,35:[1,46],36:[1,47],38:[2,81],40:[2,81],45:[1,32],48:[2,81],60:[2,81],62:[2,81],64:[2,81],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[2,81],72:[2,81],73:[2,81],74:[2,81],75:[2,81],76:[2,81],77:[2,81]},{10:[2,82],13:[2,82],22:48,35:[1,46],36:[1,47],38:[2,82],40:[2,82],45:[1,32],48:[2,82],60:[2,82],62:[2,82],64:[2,82],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[2,82],72:[2,82],73:[2,82],74:[2,82],75:[2,82],76:[2,82],77:[2,82]},{5:[2,7],11:[2,7],13:[2,7],15:[2,7],16:[2,7],17:[2,7],18:[2,7],19:[2,7],20:[2,7],36:[2,7],43:[2,7],44:[2,7],45:[2,7],46:[2,7],47:[2,7],49:[2,7],53:[2,7],61:[2,7],63:[2,7],65:[2,7],66:[2,7],68:[2,7],78:[2,7]},{5:[2,10],11:[2,10],13:[2,10],15:[2,10],16:[2,10],17:[2,10],18:[2,10],19:[2,10],20:[2,10],36:[2,10],43:[2,10],44:[2,10],45:[2,10],46:[2,10],47:[2,10],49:[2,10],53:[2,10],61:[2,10],63:[2,10],65:[2,10],66:[2,10],68:[2,10],78:[2,10]},{10:[2,69],13:[2,69],22:48,35:[1,46],36:[1,47],38:[2,69],40:[2,69],45:[1,32],48:[2,69],60:[1,53],62:[2,69],64:[2,69],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{10:[2,70],13:[2,70],22:48,35:[1,46],36:[1,47],38:[2,70],40:[2,70],45:[1,32],48:[2,70],60:[1,53],62:[2,70],64:[2,70],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{10:[2,33],13:[2,33],35:[2,33],36:[2,33],38:[2,33],40:[2,33],45:[2,33],48:[2,33],60:[2,33],62:[2,33],64:[2,33],67:[2,33],68:[2,33],69:[2,33],70:[2,33],71:[2,33],72:[2,33],73:[2,33],74:[2,33],75:[2,33],76:[2,33],77:[2,33]},{9:122,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:123,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{13:[1,76],55:124,56:73,57:74,59:75},{9:125,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{48:[2,56]},{13:[2,58],48:[2,58],60:[2,58]},{13:[1,126]},{13:[2,60],48:[2,60],60:[2,60]},{9:127,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{9:128,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{13:[2,49],48:[2,49]},{9:130,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],39:129,43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{10:[2,64],13:[2,64],35:[2,64],36:[2,64],38:[2,64],40:[2,64],45:[2,64],48:[2,64],60:[2,64],62:[2,64],64:[2,64],67:[2,64],68:[2,64],69:[2,64],70:[2,64],71:[2,64],72:[2,64],73:[2,64],74:[2,64],75:[2,64],76:[2,64],77:[2,64]},{10:[2,65],13:[2,65],35:[2,65],36:[2,65],38:[2,65],40:[2,65],45:[2,65],48:[2,65],60:[2,65],62:[2,65],64:[2,65],67:[2,65],68:[2,65],69:[2,65],70:[2,65],71:[2,65],72:[2,65],73:[2,65],74:[2,65],75:[2,65],76:[2,65],77:[2,65]},{10:[2,66],13:[2,66],35:[2,66],36:[2,66],38:[2,66],40:[2,66],45:[2,66],48:[2,66],60:[2,66],62:[2,66],64:[2,66],67:[2,66],68:[2,66],69:[2,66],70:[2,66],71:[2,66],72:[2,66],73:[2,66],74:[2,66],75:[2,66],76:[2,66],77:[2,66]},{10:[2,67],13:[2,67],35:[2,67],36:[2,67],38:[2,67],40:[2,67],45:[2,67],48:[2,67],60:[2,67],62:[2,67],64:[2,67],67:[2,67],68:[2,67],69:[2,67],70:[2,67],71:[2,67],72:[2,67],73:[2,67],74:[2,67],75:[2,67],76:[2,67],77:[2,67]},{10:[2,32],13:[2,32],35:[2,32],36:[2,32],38:[2,32],40:[2,32],45:[2,32],48:[2,32],60:[2,32],62:[2,32],64:[2,32],67:[2,32],68:[2,32],69:[2,32],70:[2,32],71:[2,32],72:[2,32],73:[2,32],74:[2,32],75:[2,32],76:[2,32],77:[2,32]},{22:48,35:[1,46],36:[1,47],38:[2,41],40:[2,41],45:[1,32],60:[1,53],62:[2,41],64:[2,41],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{22:48,35:[1,46],36:[1,47],40:[1,131],45:[1,32],60:[1,53],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{10:[2,53],13:[2,53],35:[2,53],36:[2,53],38:[2,53],40:[2,53],45:[2,53],48:[2,53],60:[2,53],62:[2,53],64:[2,53],67:[2,53],68:[2,53],69:[2,53],70:[2,53],71:[2,53],72:[2,53],73:[2,53],74:[2,53],75:[2,53],76:[2,53],77:[2,53]},{10:[2,54],13:[2,54],22:48,35:[1,46],36:[1,47],38:[2,54],40:[2,54],45:[1,32],48:[2,54],60:[1,53],62:[2,54],64:[2,54],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{48:[2,63]},{13:[2,61],22:48,35:[1,46],36:[1,47],40:[1,132],45:[1,32],48:[2,61],60:[1,53],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{10:[2,47],13:[2,47],22:48,35:[1,46],36:[1,47],38:[2,47],40:[2,47],45:[1,32],48:[2,47],60:[1,53],62:[2,47],64:[2,47],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{13:[2,50],48:[2,50]},{13:[2,34],22:48,35:[1,46],36:[1,47],40:[1,133],45:[1,32],48:[2,34],60:[1,53],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]},{9:134,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,36:[1,29],43:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],49:[1,36],53:[1,35],61:[1,37],63:[1,38],65:[1,39],66:[1,40],68:[1,41],78:[1,42]},{13:[2,62],48:[2,62],60:[2,62]},{13:[2,35],48:[2,35]},{10:[2,46],13:[2,46],22:48,35:[1,46],36:[1,47],38:[2,46],40:[2,46],45:[1,32],48:[2,46],60:[1,53],62:[2,46],64:[2,46],67:[1,49],68:[1,50],69:[1,51],70:[1,52],71:[1,54],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60]}],
defaultActions: {43:[2,1],109:[2,56],126:[2,63]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 16
break;
case 1:return 17
break;
case 2:return 18
break;
case 3:/* ignore comment */
break;
case 4:/* ignore comment */
break;
case 5:/* ignore */
break;
case 6:return 19
break;
case 7:return 45
break;
case 8:return 11
break;
case 9:return 46
break;
case 10:return 15
break;
case 11:return 53
break;
case 12:return 49
break;
case 13:return 47
break;
case 14:return 43
break;
case 15:return 44
break;
case 16:return 20
break;
case 17:return 14
break;
case 18:return 13
break;
case 19:return '\'('
break;
case 20:return 36
break;
case 21:return 38
break;
case 22:return 65
break;
case 23:return 61
break;
case 24:return 62
break;
case 25:return 66
break;
case 26:return 63
break;
case 27:return 64
break;
case 28:return 60
break;
case 29:return 67
break;
case 30:return 68
break;
case 31:return 69
break;
case 32:return 70
break;
case 33:return '^'
break;
case 34:return 60
break;
case 35:return 71
break;
case 36:return 78
break;
case 37:return 10
break;
case 38:return 40
break;
case 39:return 35
break;
case 40:return 74
break;
case 41:return 75
break;
case 42:return 72
break;
case 43:return 73
break;
case 44:return 76
break;
case 45:return 77
break;
case 46:return 52
break;
case 47:return 48
break;
case 48:return '#'
break;
case 49:return 5
break;
}
},
rules: [/^(?:"(?:[^\"\\]|\\"|\\\\)*")/,/^(?:\/(?:[^\/\\]|\\\/|\\\\)*\/[gi]+)/,/^(?:`(?:[^\`]|``)*`)/,/^(?:\/\/[^\n]+\n)/,/^(?:\/\*[^]+?\*\/)/,/^(?:\s+)/,/^(?:-?\d+(?:\.\d*(?:[eE]-?\d+)?|[eE]-?\d+)?)/,/^(?::\w+)/,/^(?:module\b)/,/^(?:import\b)/,/^(?:export\b)/,/^(?:fn\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:nil\b)/,/^(?:[\w\.]*\.[\w\.]*)/,/^(?:\w+)/,/^(?:'\()/,/^(?:\()/,/^(?:\))/,/^(?:#\{)/,/^(?:\{)/,/^(?:\})/,/^(?:#\[)/,/^(?:\[)/,/^(?:\])/,/^(?:&)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:\^)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?::)/,/^(?:#)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}