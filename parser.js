/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"statements":4,"EOF":5,"statement":6,"moduleStatement":7,"exportStatement":8,"expr":9,";":10,"module":11,"moduleIdentifier":12,"identifier":13,"identifierWithPeriods":14,"export":15,"string":16,"regex":17,"js":18,"number":19,"nil":20,"boolean":21,"keywordLiteral":22,"importExpr":23,"ifExpr":24,"fnExpr":25,"letExpr":26,"map":27,"list":28,"set":29,"bag":30,"mapAccess":31,"binaryOperation":32,"unaryOperation":33,"assignment":34,"(":35,"delimitedExprs":36,")":37,"exprOptionalComma":38,",":39,"exprsOptionalComma":40,"separatedExprs":41,"true":42,"false":43,"keyword":44,"import":45,"if":46,":":47,"let":48,"letBindings":49,"letBinding":50,"fn":51,"fnBindings":52,"nonRestParams":53,"restParam":54,"nonRestParam":55,"=":56,"&":57,"{":58,"}":59,"[":60,"]":61,"#{":62,"#[":63,"+":64,"-":65,"/":66,"*":67,"|":68,"<":69,">":70,"<=":71,">=":72,"==":73,"!=":74,"!":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",11:"module",13:"identifier",14:"identifierWithPeriods",15:"export",16:"string",17:"regex",18:"js",19:"number",20:"nil",35:"(",37:")",39:",",42:"true",43:"false",44:"keyword",45:"import",46:"if",47:":",48:"let",51:"fn",56:"=",57:"&",58:"{",59:"}",60:"[",61:"]",62:"#{",63:"#[",64:"+",65:"-",66:"/",67:"*",68:"|",69:"<",70:">",71:"<=",72:">=",73:"==",74:"!=",75:"!"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,2],[7,3],[12,1],[12,1],[8,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,4],[9,3],[38,1],[38,2],[40,1],[40,2],[41,2],[41,3],[36,1],[36,2],[21,1],[21,1],[22,1],[23,2],[24,6],[26,4],[49,1],[49,2],[50,2],[25,4],[52,1],[52,2],[53,1],[53,2],[55,1],[55,2],[55,3],[55,4],[54,2],[27,3],[28,3],[29,3],[30,3],[31,2],[34,3],[34,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[33,2],[33,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = [$$[$0]] 
break;
case 3: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = { type: 'module', name: $$[$0-1] } 
break;
case 10: this.$ = { type: 'export', value: $$[$0-1] } 
break;
case 11: this.$ = { type: 'string', value: yytext.slice(1, -1) } 
break;
case 12: this.$ = { type: 'regex', value: yytext } 
break;
case 13: this.$ = { type: 'js', value: yytext.slice(1, -1) } 
break;
case 14: this.$ = { type: 'number', value: Number(yytext) } 
break;
case 15: this.$ = { type: 'nil' } 
break;
case 18: this.$ = { type: 'identifier', value: yytext } 
break;
case 31: this.$ = { type: 'functionCall', function: $$[$0-3], arguments: $$[$0-1] } 
break;
case 32: this.$ = { type: 'exprList', value: $$[$0-1] } 
break;
case 35: this.$ = [$$[$0]] 
break;
case 36: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 37: this.$ = [$$[$0-1]] 
break;
case 38: $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 39: this.$ = [$$[$0]] 
break;
case 40: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 41: this.$ = { type: 'boolean', value: 'true' }; 
break;
case 42: this.$ = { type: 'boolean', value: 'false' }; 
break;
case 43: this.$ = { type: 'keyword', value: yytext.slice(1) } 
break;
case 44: this.$ = { type: 'import', name: $$[$0] } 
break;
case 45: this.$ = { type: 'if', condition: $$[$0-4], consequent: $$[$0-2], alternative: $$[$0] } 
break;
case 46: this.$ = { type: 'let', bindings: $$[$0-2], value: $$[$0] } 
break;
case 47: this.$ = [$$[$0]]; 
break;
case 48: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 49: this.$ = { name: $$[$0-1], value: $$[$0] } 
break;
case 50: this.$ = { type: 'fn', bindings: $$[$0-2], value: $$[$0] } 
break;
case 51: this.$ = $$[$0] 
break;
case 52: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 53: this.$ = [$$[$0]] 
break;
case 54: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 55: this.$ = { name: $$[$0] } 
break;
case 56: this.$ = { name: $$[$0-1] } 
break;
case 57: this.$ = { name: $$[$0-2], default: $$[$0] } 
break;
case 58: this.$ = { name: $$[$0-3], default: $$[$0-1] } 
break;
case 59: this.$ = { name: $$[$0], rest: true } 
break;
case 60: this.$ = { type: 'map', arguments: $$[$0-1] } 
break;
case 61: this.$ = { type: 'list', arguments: $$[$0-1] } 
break;
case 62: this.$ = { type: 'set', arguments: $$[$0-1] } 
break;
case 63: this.$ = { type: 'bag', arguments: $$[$0-1] } 
break;
case 64: this.$ = { type: 'mapAccess', map: $$[$0-1], key: $$[$0] } 
break;
case 65: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 66: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 67: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 68: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 69: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 70: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 71: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 72: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 73: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 74: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 75: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 76: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 77: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 78: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 79: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
case 80: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,11:[1,7],13:[1,16],15:[1,8],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{1:[3]},{5:[1,43],6:44,7:4,8:5,9:6,11:[1,7],13:[1,16],15:[1,8],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{5:[2,2],11:[2,2],13:[2,2],15:[2,2],16:[2,2],17:[2,2],18:[2,2],19:[2,2],20:[2,2],35:[2,2],42:[2,2],43:[2,2],44:[2,2],45:[2,2],46:[2,2],48:[2,2],51:[2,2],58:[2,2],60:[2,2],62:[2,2],63:[2,2],65:[2,2],75:[2,2]},{5:[2,4],11:[2,4],13:[2,4],15:[2,4],16:[2,4],17:[2,4],18:[2,4],19:[2,4],20:[2,4],35:[2,4],42:[2,4],43:[2,4],44:[2,4],45:[2,4],46:[2,4],48:[2,4],51:[2,4],58:[2,4],60:[2,4],62:[2,4],63:[2,4],65:[2,4],75:[2,4]},{5:[2,5],11:[2,5],13:[2,5],15:[2,5],16:[2,5],17:[2,5],18:[2,5],19:[2,5],20:[2,5],35:[2,5],42:[2,5],43:[2,5],44:[2,5],45:[2,5],46:[2,5],48:[2,5],51:[2,5],58:[2,5],60:[2,5],62:[2,5],63:[2,5],65:[2,5],75:[2,5]},{10:[1,45],22:47,35:[1,46],44:[1,32],57:[1,52],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59]},{12:60,13:[1,61],14:[1,62]},{9:63,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{10:[2,11],13:[2,11],16:[2,11],17:[2,11],18:[2,11],19:[2,11],20:[2,11],35:[2,11],37:[2,11],39:[2,11],42:[2,11],43:[2,11],44:[2,11],45:[2,11],46:[2,11],47:[2,11],48:[2,11],51:[2,11],57:[2,11],58:[2,11],59:[2,11],60:[2,11],61:[2,11],62:[2,11],63:[2,11],64:[2,11],65:[2,11],66:[2,11],67:[2,11],68:[2,11],69:[2,11],70:[2,11],71:[2,11],72:[2,11],73:[2,11],74:[2,11],75:[2,11]},{10:[2,12],13:[2,12],16:[2,12],17:[2,12],18:[2,12],19:[2,12],20:[2,12],35:[2,12],37:[2,12],39:[2,12],42:[2,12],43:[2,12],44:[2,12],45:[2,12],46:[2,12],47:[2,12],48:[2,12],51:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12],61:[2,12],62:[2,12],63:[2,12],64:[2,12],65:[2,12],66:[2,12],67:[2,12],68:[2,12],69:[2,12],70:[2,12],71:[2,12],72:[2,12],73:[2,12],74:[2,12],75:[2,12]},{10:[2,13],13:[2,13],16:[2,13],17:[2,13],18:[2,13],19:[2,13],20:[2,13],35:[2,13],37:[2,13],39:[2,13],42:[2,13],43:[2,13],44:[2,13],45:[2,13],46:[2,13],47:[2,13],48:[2,13],51:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],64:[2,13],65:[2,13],66:[2,13],67:[2,13],68:[2,13],69:[2,13],70:[2,13],71:[2,13],72:[2,13],73:[2,13],74:[2,13],75:[2,13]},{10:[2,14],13:[2,14],16:[2,14],17:[2,14],18:[2,14],19:[2,14],20:[2,14],35:[2,14],37:[2,14],39:[2,14],42:[2,14],43:[2,14],44:[2,14],45:[2,14],46:[2,14],47:[2,14],48:[2,14],51:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14],61:[2,14],62:[2,14],63:[2,14],64:[2,14],65:[2,14],66:[2,14],67:[2,14],68:[2,14],69:[2,14],70:[2,14],71:[2,14],72:[2,14],73:[2,14],74:[2,14],75:[2,14]},{10:[2,15],13:[2,15],16:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],35:[2,15],37:[2,15],39:[2,15],42:[2,15],43:[2,15],44:[2,15],45:[2,15],46:[2,15],47:[2,15],48:[2,15],51:[2,15],57:[2,15],58:[2,15],59:[2,15],60:[2,15],61:[2,15],62:[2,15],63:[2,15],64:[2,15],65:[2,15],66:[2,15],67:[2,15],68:[2,15],69:[2,15],70:[2,15],71:[2,15],72:[2,15],73:[2,15],74:[2,15],75:[2,15]},{10:[2,16],13:[2,16],16:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],35:[2,16],37:[2,16],39:[2,16],42:[2,16],43:[2,16],44:[2,16],45:[2,16],46:[2,16],47:[2,16],48:[2,16],51:[2,16],57:[2,16],58:[2,16],59:[2,16],60:[2,16],61:[2,16],62:[2,16],63:[2,16],64:[2,16],65:[2,16],66:[2,16],67:[2,16],68:[2,16],69:[2,16],70:[2,16],71:[2,16],72:[2,16],73:[2,16],74:[2,16],75:[2,16]},{10:[2,17],13:[2,17],16:[2,17],17:[2,17],18:[2,17],19:[2,17],20:[2,17],35:[2,17],37:[2,17],39:[2,17],42:[2,17],43:[2,17],44:[2,17],45:[2,17],46:[2,17],47:[2,17],48:[2,17],51:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],61:[2,17],62:[2,17],63:[2,17],64:[2,17],65:[2,17],66:[2,17],67:[2,17],68:[2,17],69:[2,17],70:[2,17],71:[2,17],72:[2,17],73:[2,17],74:[2,17],75:[2,17]},{10:[2,18],13:[2,18],16:[2,18],17:[2,18],18:[2,18],19:[2,18],20:[2,18],35:[2,18],37:[2,18],39:[2,18],42:[2,18],43:[2,18],44:[2,18],45:[2,18],46:[2,18],47:[2,18],48:[2,18],51:[2,18],56:[1,64],57:[2,18],58:[2,18],59:[2,18],60:[2,18],61:[2,18],62:[2,18],63:[2,18],64:[2,18],65:[2,18],66:[2,18],67:[2,18],68:[2,18],69:[2,18],70:[2,18],71:[2,18],72:[2,18],73:[2,18],74:[2,18],75:[2,18]},{10:[2,19],13:[2,19],16:[2,19],17:[2,19],18:[2,19],19:[2,19],20:[2,19],35:[2,19],37:[2,19],39:[2,19],42:[2,19],43:[2,19],44:[2,19],45:[2,19],46:[2,19],47:[2,19],48:[2,19],51:[2,19],57:[2,19],58:[2,19],59:[2,19],60:[2,19],61:[2,19],62:[2,19],63:[2,19],64:[2,19],65:[2,19],66:[2,19],67:[2,19],68:[2,19],69:[2,19],70:[2,19],71:[2,19],72:[2,19],73:[2,19],74:[2,19],75:[2,19]},{10:[2,20],13:[2,20],16:[2,20],17:[2,20],18:[2,20],19:[2,20],20:[2,20],35:[2,20],37:[2,20],39:[2,20],42:[2,20],43:[2,20],44:[2,20],45:[2,20],46:[2,20],47:[2,20],48:[2,20],51:[2,20],57:[2,20],58:[2,20],59:[2,20],60:[2,20],61:[2,20],62:[2,20],63:[2,20],64:[2,20],65:[2,20],66:[2,20],67:[2,20],68:[2,20],69:[2,20],70:[2,20],71:[2,20],72:[2,20],73:[2,20],74:[2,20],75:[2,20]},{10:[2,21],13:[2,21],16:[2,21],17:[2,21],18:[2,21],19:[2,21],20:[2,21],35:[2,21],37:[2,21],39:[2,21],42:[2,21],43:[2,21],44:[2,21],45:[2,21],46:[2,21],47:[2,21],48:[2,21],51:[2,21],57:[2,21],58:[2,21],59:[2,21],60:[2,21],61:[2,21],62:[2,21],63:[2,21],64:[2,21],65:[2,21],66:[2,21],67:[2,21],68:[2,21],69:[2,21],70:[2,21],71:[2,21],72:[2,21],73:[2,21],74:[2,21],75:[2,21]},{10:[2,22],13:[2,22],16:[2,22],17:[2,22],18:[2,22],19:[2,22],20:[2,22],35:[2,22],37:[2,22],39:[2,22],42:[2,22],43:[2,22],44:[2,22],45:[2,22],46:[2,22],47:[2,22],48:[2,22],51:[2,22],57:[2,22],58:[2,22],59:[2,22],60:[2,22],61:[2,22],62:[2,22],63:[2,22],64:[2,22],65:[2,22],66:[2,22],67:[2,22],68:[2,22],69:[2,22],70:[2,22],71:[2,22],72:[2,22],73:[2,22],74:[2,22],75:[2,22]},{10:[2,23],13:[2,23],16:[2,23],17:[2,23],18:[2,23],19:[2,23],20:[2,23],35:[2,23],37:[2,23],39:[2,23],42:[2,23],43:[2,23],44:[2,23],45:[2,23],46:[2,23],47:[2,23],48:[2,23],51:[2,23],57:[2,23],58:[2,23],59:[2,23],60:[2,23],61:[2,23],62:[2,23],63:[2,23],64:[2,23],65:[2,23],66:[2,23],67:[2,23],68:[2,23],69:[2,23],70:[2,23],71:[2,23],72:[2,23],73:[2,23],74:[2,23],75:[2,23]},{10:[2,24],13:[2,24],16:[2,24],17:[2,24],18:[2,24],19:[2,24],20:[2,24],35:[2,24],37:[2,24],39:[2,24],42:[2,24],43:[2,24],44:[2,24],45:[2,24],46:[2,24],47:[2,24],48:[2,24],51:[2,24],57:[2,24],58:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24],63:[2,24],64:[2,24],65:[2,24],66:[2,24],67:[2,24],68:[2,24],69:[2,24],70:[2,24],71:[2,24],72:[2,24],73:[2,24],74:[2,24],75:[2,24]},{10:[2,25],13:[2,25],16:[2,25],17:[2,25],18:[2,25],19:[2,25],20:[2,25],35:[2,25],37:[2,25],39:[2,25],42:[2,25],43:[2,25],44:[2,25],45:[2,25],46:[2,25],47:[2,25],48:[2,25],51:[2,25],57:[2,25],58:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25],63:[2,25],64:[2,25],65:[2,25],66:[2,25],67:[2,25],68:[2,25],69:[2,25],70:[2,25],71:[2,25],72:[2,25],73:[2,25],74:[2,25],75:[2,25]},{10:[2,26],13:[2,26],16:[2,26],17:[2,26],18:[2,26],19:[2,26],20:[2,26],35:[2,26],37:[2,26],39:[2,26],42:[2,26],43:[2,26],44:[2,26],45:[2,26],46:[2,26],47:[2,26],48:[2,26],51:[2,26],57:[2,26],58:[2,26],59:[2,26],60:[2,26],61:[2,26],62:[2,26],63:[2,26],64:[2,26],65:[2,26],66:[2,26],67:[2,26],68:[2,26],69:[2,26],70:[2,26],71:[2,26],72:[2,26],73:[2,26],74:[2,26],75:[2,26]},{10:[2,27],13:[2,27],16:[2,27],17:[2,27],18:[2,27],19:[2,27],20:[2,27],35:[2,27],37:[2,27],39:[2,27],42:[2,27],43:[2,27],44:[2,27],45:[2,27],46:[2,27],47:[2,27],48:[2,27],51:[2,27],56:[1,65],57:[2,27],58:[2,27],59:[2,27],60:[2,27],61:[2,27],62:[2,27],63:[2,27],64:[2,27],65:[2,27],66:[2,27],67:[2,27],68:[2,27],69:[2,27],70:[2,27],71:[2,27],72:[2,27],73:[2,27],74:[2,27],75:[2,27]},{10:[2,28],13:[2,28],16:[2,28],17:[2,28],18:[2,28],19:[2,28],20:[2,28],35:[2,28],37:[2,28],39:[2,28],42:[2,28],43:[2,28],44:[2,28],45:[2,28],46:[2,28],47:[2,28],48:[2,28],51:[2,28],57:[2,28],58:[2,28],59:[2,28],60:[2,28],61:[2,28],62:[2,28],63:[2,28],64:[2,28],65:[2,28],66:[2,28],67:[2,28],68:[2,28],69:[2,28],70:[2,28],71:[2,28],72:[2,28],73:[2,28],74:[2,28],75:[2,28]},{10:[2,29],13:[2,29],16:[2,29],17:[2,29],18:[2,29],19:[2,29],20:[2,29],35:[2,29],37:[2,29],39:[2,29],42:[2,29],43:[2,29],44:[2,29],45:[2,29],46:[2,29],47:[2,29],48:[2,29],51:[2,29],57:[2,29],58:[2,29],59:[2,29],60:[2,29],61:[2,29],62:[2,29],63:[2,29],64:[2,29],65:[2,29],66:[2,29],67:[2,29],68:[2,29],69:[2,29],70:[2,29],71:[2,29],72:[2,29],73:[2,29],74:[2,29],75:[2,29]},{10:[2,30],13:[2,30],16:[2,30],17:[2,30],18:[2,30],19:[2,30],20:[2,30],35:[2,30],37:[2,30],39:[2,30],42:[2,30],43:[2,30],44:[2,30],45:[2,30],46:[2,30],47:[2,30],48:[2,30],51:[2,30],57:[2,30],58:[2,30],59:[2,30],60:[2,30],61:[2,30],62:[2,30],63:[2,30],64:[2,30],65:[2,30],66:[2,30],67:[2,30],68:[2,30],69:[2,30],70:[2,30],71:[2,30],72:[2,30],73:[2,30],74:[2,30],75:[2,30]},{9:67,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],36:66,41:68,42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{10:[2,41],13:[2,41],16:[2,41],17:[2,41],18:[2,41],19:[2,41],20:[2,41],35:[2,41],37:[2,41],39:[2,41],42:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],48:[2,41],51:[2,41],57:[2,41],58:[2,41],59:[2,41],60:[2,41],61:[2,41],62:[2,41],63:[2,41],64:[2,41],65:[2,41],66:[2,41],67:[2,41],68:[2,41],69:[2,41],70:[2,41],71:[2,41],72:[2,41],73:[2,41],74:[2,41],75:[2,41]},{10:[2,42],13:[2,42],16:[2,42],17:[2,42],18:[2,42],19:[2,42],20:[2,42],35:[2,42],37:[2,42],39:[2,42],42:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42],51:[2,42],57:[2,42],58:[2,42],59:[2,42],60:[2,42],61:[2,42],62:[2,42],63:[2,42],64:[2,42],65:[2,42],66:[2,42],67:[2,42],68:[2,42],69:[2,42],70:[2,42],71:[2,42],72:[2,42],73:[2,42],74:[2,42],75:[2,42]},{10:[2,43],13:[2,43],16:[2,43],17:[2,43],18:[2,43],19:[2,43],20:[2,43],35:[2,43],37:[2,43],39:[2,43],42:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[2,43],51:[2,43],56:[2,43],57:[2,43],58:[2,43],59:[2,43],60:[2,43],61:[2,43],62:[2,43],63:[2,43],64:[2,43],65:[2,43],66:[2,43],67:[2,43],68:[2,43],69:[2,43],70:[2,43],71:[2,43],72:[2,43],73:[2,43],74:[2,43],75:[2,43]},{12:69,13:[1,61],14:[1,62]},{9:70,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{13:[1,74],52:71,53:72,55:73},{13:[1,77],49:75,50:76},{9:80,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],38:79,40:78,42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:67,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],36:81,41:68,42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:67,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],36:82,41:68,42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:67,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],36:83,41:68,42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:84,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:85,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{1:[2,1]},{5:[2,3],11:[2,3],13:[2,3],15:[2,3],16:[2,3],17:[2,3],18:[2,3],19:[2,3],20:[2,3],35:[2,3],42:[2,3],43:[2,3],44:[2,3],45:[2,3],46:[2,3],48:[2,3],51:[2,3],58:[2,3],60:[2,3],62:[2,3],63:[2,3],65:[2,3],75:[2,3]},{5:[2,6],11:[2,6],13:[2,6],15:[2,6],16:[2,6],17:[2,6],18:[2,6],19:[2,6],20:[2,6],35:[2,6],42:[2,6],43:[2,6],44:[2,6],45:[2,6],46:[2,6],48:[2,6],51:[2,6],58:[2,6],60:[2,6],62:[2,6],63:[2,6],65:[2,6],75:[2,6]},{9:67,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],36:86,41:68,42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{10:[2,64],13:[2,64],16:[2,64],17:[2,64],18:[2,64],19:[2,64],20:[2,64],35:[2,64],37:[2,64],39:[2,64],42:[2,64],43:[2,64],44:[2,64],45:[2,64],46:[2,64],47:[2,64],48:[2,64],51:[2,64],56:[2,64],57:[2,64],58:[2,64],59:[2,64],60:[2,64],61:[2,64],62:[2,64],63:[2,64],64:[2,64],65:[2,64],66:[2,64],67:[2,64],68:[2,64],69:[2,64],70:[2,64],71:[2,64],72:[2,64],73:[2,64],74:[2,64],75:[2,64]},{9:87,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:88,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:89,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:90,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:91,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:92,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:93,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:94,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:95,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:96,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:97,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:98,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{10:[1,99]},{10:[2,8],13:[2,8],16:[2,8],17:[2,8],18:[2,8],19:[2,8],20:[2,8],35:[2,8],37:[2,8],39:[2,8],42:[2,8],43:[2,8],44:[2,8],45:[2,8],46:[2,8],47:[2,8],48:[2,8],51:[2,8],57:[2,8],58:[2,8],59:[2,8],60:[2,8],61:[2,8],62:[2,8],63:[2,8],64:[2,8],65:[2,8],66:[2,8],67:[2,8],68:[2,8],69:[2,8],70:[2,8],71:[2,8],72:[2,8],73:[2,8],74:[2,8],75:[2,8]},{10:[2,9],13:[2,9],16:[2,9],17:[2,9],18:[2,9],19:[2,9],20:[2,9],35:[2,9],37:[2,9],39:[2,9],42:[2,9],43:[2,9],44:[2,9],45:[2,9],46:[2,9],47:[2,9],48:[2,9],51:[2,9],57:[2,9],58:[2,9],59:[2,9],60:[2,9],61:[2,9],62:[2,9],63:[2,9],64:[2,9],65:[2,9],66:[2,9],67:[2,9],68:[2,9],69:[2,9],70:[2,9],71:[2,9],72:[2,9],73:[2,9],74:[2,9],75:[2,9]},{10:[1,100],22:47,35:[1,46],44:[1,32],57:[1,52],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59]},{9:101,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:102,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{37:[1,103]},{22:47,35:[1,46],37:[2,39],39:[1,104],44:[1,32],57:[1,52],59:[2,39],61:[2,39],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59]},{9:105,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{10:[2,44],13:[2,44],16:[2,44],17:[2,44],18:[2,44],19:[2,44],20:[2,44],35:[2,44],37:[2,44],39:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44],51:[2,44],57:[2,44],58:[2,44],59:[2,44],60:[2,44],61:[2,44],62:[2,44],63:[2,44],64:[2,44],65:[2,44],66:[2,44],67:[2,44],68:[2,44],69:[2,44],70:[2,44],71:[2,44],72:[2,44],73:[2,44],74:[2,44],75:[2,44]},{22:47,35:[1,46],44:[1,32],47:[1,106],57:[1,52],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59]},{47:[1,107]},{13:[1,74],47:[2,51],54:108,55:109,57:[1,110]},{13:[2,53],47:[2,53],57:[2,53]},{13:[2,55],39:[1,111],47:[2,55],56:[1,112],57:[2,55]},{13:[1,77],47:[1,113],50:114},{13:[2,47],47:[2,47]},{9:80,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],38:115,42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{59:[1,116]},{9:80,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],38:117,42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],59:[2,35],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{13:[2,33],16:[2,33],17:[2,33],18:[2,33],19:[2,33],20:[2,33],22:47,35:[1,46],39:[1,118],42:[2,33],43:[2,33],44:[1,32],45:[2,33],46:[2,33],47:[2,33],48:[2,33],51:[2,33],57:[1,52],58:[2,33],59:[2,33],60:[2,33],62:[2,33],63:[2,33],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[2,33]},{61:[1,119]},{59:[1,120]},{61:[1,121]},{10:[2,79],13:[2,79],16:[2,79],17:[2,79],18:[2,79],19:[2,79],20:[2,79],22:47,35:[1,46],37:[2,79],39:[2,79],42:[2,79],43:[2,79],44:[1,32],45:[2,79],46:[2,79],47:[2,79],48:[2,79],51:[2,79],57:[2,79],58:[2,79],59:[2,79],60:[2,79],61:[2,79],62:[2,79],63:[2,79],64:[2,79],65:[2,79],66:[1,50],67:[1,51],68:[2,79],69:[2,79],70:[2,79],71:[2,79],72:[2,79],73:[2,79],74:[2,79],75:[2,79]},{10:[2,80],13:[2,80],16:[2,80],17:[2,80],18:[2,80],19:[2,80],20:[2,80],22:47,35:[1,46],37:[2,80],39:[2,80],42:[2,80],43:[2,80],44:[1,32],45:[2,80],46:[2,80],47:[2,80],48:[2,80],51:[2,80],57:[2,80],58:[2,80],59:[2,80],60:[2,80],61:[2,80],62:[2,80],63:[2,80],64:[2,80],65:[2,80],66:[2,80],67:[2,80],68:[2,80],69:[2,80],70:[2,80],71:[2,80],72:[2,80],73:[2,80],74:[2,80],75:[2,80]},{37:[1,122]},{10:[2,67],13:[2,67],16:[2,67],17:[2,67],18:[2,67],19:[2,67],20:[2,67],22:47,35:[1,46],37:[2,67],39:[2,67],42:[2,67],43:[2,67],44:[1,32],45:[2,67],46:[2,67],47:[2,67],48:[2,67],51:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],61:[2,67],62:[2,67],63:[2,67],64:[2,67],65:[2,67],66:[1,50],67:[1,51],68:[2,67],69:[2,67],70:[2,67],71:[2,67],72:[2,67],73:[2,67],74:[2,67],75:[2,67]},{10:[2,68],13:[2,68],16:[2,68],17:[2,68],18:[2,68],19:[2,68],20:[2,68],22:47,35:[1,46],37:[2,68],39:[2,68],42:[2,68],43:[2,68],44:[1,32],45:[2,68],46:[2,68],47:[2,68],48:[2,68],51:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],61:[2,68],62:[2,68],63:[2,68],64:[2,68],65:[2,68],66:[1,50],67:[1,51],68:[2,68],69:[2,68],70:[2,68],71:[2,68],72:[2,68],73:[2,68],74:[2,68],75:[2,68]},{10:[2,69],13:[2,69],16:[2,69],17:[2,69],18:[2,69],19:[2,69],20:[2,69],22:47,35:[1,46],37:[2,69],39:[2,69],42:[2,69],43:[2,69],44:[1,32],45:[2,69],46:[2,69],47:[2,69],48:[2,69],51:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[2,69],62:[2,69],63:[2,69],64:[2,69],65:[2,69],66:[2,69],67:[2,69],68:[2,69],69:[2,69],70:[2,69],71:[2,69],72:[2,69],73:[2,69],74:[2,69],75:[2,69]},{10:[2,70],13:[2,70],16:[2,70],17:[2,70],18:[2,70],19:[2,70],20:[2,70],22:47,35:[1,46],37:[2,70],39:[2,70],42:[2,70],43:[2,70],44:[1,32],45:[2,70],46:[2,70],47:[2,70],48:[2,70],51:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],64:[2,70],65:[2,70],66:[2,70],67:[2,70],68:[2,70],69:[2,70],70:[2,70],71:[2,70],72:[2,70],73:[2,70],74:[2,70],75:[2,70]},{10:[2,71],13:[2,71],16:[2,71],17:[2,71],18:[2,71],19:[2,71],20:[2,71],22:47,35:[1,46],37:[2,71],39:[2,71],42:[2,71],43:[2,71],44:[1,32],45:[2,71],46:[2,71],47:[2,71],48:[2,71],51:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],61:[2,71],62:[2,71],63:[2,71],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[2,71],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[2,71]},{10:[2,72],13:[2,72],16:[2,72],17:[2,72],18:[2,72],19:[2,72],20:[2,72],22:47,35:[1,46],37:[2,72],39:[2,72],42:[2,72],43:[2,72],44:[1,32],45:[2,72],46:[2,72],47:[2,72],48:[2,72],51:[2,72],57:[1,52],58:[2,72],59:[2,72],60:[2,72],61:[2,72],62:[2,72],63:[2,72],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[2,72],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[2,72]},{10:[2,73],13:[2,73],16:[2,73],17:[2,73],18:[2,73],19:[2,73],20:[2,73],22:47,35:[1,46],37:[2,73],39:[2,73],42:[2,73],43:[2,73],44:[1,32],45:[2,73],46:[2,73],47:[2,73],48:[2,73],51:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[2,73],69:[2,73],70:[2,73],71:[2,73],72:[2,73],73:[2,73],74:[2,73],75:[2,73]},{10:[2,74],13:[2,74],16:[2,74],17:[2,74],18:[2,74],19:[2,74],20:[2,74],22:47,35:[1,46],37:[2,74],39:[2,74],42:[2,74],43:[2,74],44:[1,32],45:[2,74],46:[2,74],47:[2,74],48:[2,74],51:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[2,74],69:[2,74],70:[2,74],71:[2,74],72:[2,74],73:[2,74],74:[2,74],75:[2,74]},{10:[2,75],13:[2,75],16:[2,75],17:[2,75],18:[2,75],19:[2,75],20:[2,75],22:47,35:[1,46],37:[2,75],39:[2,75],42:[2,75],43:[2,75],44:[1,32],45:[2,75],46:[2,75],47:[2,75],48:[2,75],51:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],61:[2,75],62:[2,75],63:[2,75],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[2,75],69:[2,75],70:[2,75],71:[2,75],72:[2,75],73:[2,75],74:[2,75],75:[2,75]},{10:[2,76],13:[2,76],16:[2,76],17:[2,76],18:[2,76],19:[2,76],20:[2,76],22:47,35:[1,46],37:[2,76],39:[2,76],42:[2,76],43:[2,76],44:[1,32],45:[2,76],46:[2,76],47:[2,76],48:[2,76],51:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[2,76],69:[2,76],70:[2,76],71:[2,76],72:[2,76],73:[2,76],74:[2,76],75:[2,76]},{10:[2,77],13:[2,77],16:[2,77],17:[2,77],18:[2,77],19:[2,77],20:[2,77],22:47,35:[1,46],37:[2,77],39:[2,77],42:[2,77],43:[2,77],44:[1,32],45:[2,77],46:[2,77],47:[2,77],48:[2,77],51:[2,77],57:[2,77],58:[2,77],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[2,77],69:[2,77],70:[2,77],71:[2,77],72:[2,77],73:[2,77],74:[2,77],75:[2,77]},{10:[2,78],13:[2,78],16:[2,78],17:[2,78],18:[2,78],19:[2,78],20:[2,78],22:47,35:[1,46],37:[2,78],39:[2,78],42:[2,78],43:[2,78],44:[1,32],45:[2,78],46:[2,78],47:[2,78],48:[2,78],51:[2,78],57:[2,78],58:[2,78],59:[2,78],60:[2,78],61:[2,78],62:[2,78],63:[2,78],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[2,78],69:[2,78],70:[2,78],71:[2,78],72:[2,78],73:[2,78],74:[2,78],75:[2,78]},{5:[2,7],11:[2,7],13:[2,7],15:[2,7],16:[2,7],17:[2,7],18:[2,7],19:[2,7],20:[2,7],35:[2,7],42:[2,7],43:[2,7],44:[2,7],45:[2,7],46:[2,7],48:[2,7],51:[2,7],58:[2,7],60:[2,7],62:[2,7],63:[2,7],65:[2,7],75:[2,7]},{5:[2,10],11:[2,10],13:[2,10],15:[2,10],16:[2,10],17:[2,10],18:[2,10],19:[2,10],20:[2,10],35:[2,10],42:[2,10],43:[2,10],44:[2,10],45:[2,10],46:[2,10],48:[2,10],51:[2,10],58:[2,10],60:[2,10],62:[2,10],63:[2,10],65:[2,10],75:[2,10]},{10:[2,65],13:[2,65],16:[2,65],17:[2,65],18:[2,65],19:[2,65],20:[2,65],22:47,35:[1,46],37:[2,65],39:[2,65],42:[2,65],43:[2,65],44:[1,32],45:[2,65],46:[2,65],47:[2,65],48:[2,65],51:[2,65],57:[1,52],58:[2,65],59:[2,65],60:[2,65],61:[2,65],62:[2,65],63:[2,65],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[2,65]},{10:[2,66],13:[2,66],16:[2,66],17:[2,66],18:[2,66],19:[2,66],20:[2,66],22:47,35:[1,46],37:[2,66],39:[2,66],42:[2,66],43:[2,66],44:[1,32],45:[2,66],46:[2,66],47:[2,66],48:[2,66],51:[2,66],57:[1,52],58:[2,66],59:[2,66],60:[2,66],61:[2,66],62:[2,66],63:[2,66],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[2,66]},{10:[2,32],13:[2,32],16:[2,32],17:[2,32],18:[2,32],19:[2,32],20:[2,32],35:[2,32],37:[2,32],39:[2,32],42:[2,32],43:[2,32],44:[2,32],45:[2,32],46:[2,32],47:[2,32],48:[2,32],51:[2,32],57:[2,32],58:[2,32],59:[2,32],60:[2,32],61:[2,32],62:[2,32],63:[2,32],64:[2,32],65:[2,32],66:[2,32],67:[2,32],68:[2,32],69:[2,32],70:[2,32],71:[2,32],72:[2,32],73:[2,32],74:[2,32],75:[2,32]},{13:[2,37],16:[2,37],17:[2,37],18:[2,37],19:[2,37],20:[2,37],35:[2,37],42:[2,37],43:[2,37],44:[2,37],45:[2,37],46:[2,37],48:[2,37],51:[2,37],58:[2,37],60:[2,37],62:[2,37],63:[2,37],65:[2,37],75:[2,37]},{22:47,35:[1,46],37:[2,40],39:[1,123],44:[1,32],57:[1,52],59:[2,40],61:[2,40],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59]},{9:124,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:125,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{47:[2,52]},{13:[2,54],47:[2,54],57:[2,54]},{13:[1,126]},{13:[2,56],47:[2,56],57:[2,56]},{9:127,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{9:128,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{13:[2,48],47:[2,48]},{13:[2,49],47:[2,49]},{10:[2,60],13:[2,60],16:[2,60],17:[2,60],18:[2,60],19:[2,60],20:[2,60],35:[2,60],37:[2,60],39:[2,60],42:[2,60],43:[2,60],44:[2,60],45:[2,60],46:[2,60],47:[2,60],48:[2,60],51:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],63:[2,60],64:[2,60],65:[2,60],66:[2,60],67:[2,60],68:[2,60],69:[2,60],70:[2,60],71:[2,60],72:[2,60],73:[2,60],74:[2,60],75:[2,60]},{59:[2,36]},{13:[2,34],16:[2,34],17:[2,34],18:[2,34],19:[2,34],20:[2,34],35:[2,34],42:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34],51:[2,34],58:[2,34],59:[2,34],60:[2,34],62:[2,34],63:[2,34],65:[2,34],75:[2,34]},{10:[2,61],13:[2,61],16:[2,61],17:[2,61],18:[2,61],19:[2,61],20:[2,61],35:[2,61],37:[2,61],39:[2,61],42:[2,61],43:[2,61],44:[2,61],45:[2,61],46:[2,61],47:[2,61],48:[2,61],51:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],61:[2,61],62:[2,61],63:[2,61],64:[2,61],65:[2,61],66:[2,61],67:[2,61],68:[2,61],69:[2,61],70:[2,61],71:[2,61],72:[2,61],73:[2,61],74:[2,61],75:[2,61]},{10:[2,62],13:[2,62],16:[2,62],17:[2,62],18:[2,62],19:[2,62],20:[2,62],35:[2,62],37:[2,62],39:[2,62],42:[2,62],43:[2,62],44:[2,62],45:[2,62],46:[2,62],47:[2,62],48:[2,62],51:[2,62],57:[2,62],58:[2,62],59:[2,62],60:[2,62],61:[2,62],62:[2,62],63:[2,62],64:[2,62],65:[2,62],66:[2,62],67:[2,62],68:[2,62],69:[2,62],70:[2,62],71:[2,62],72:[2,62],73:[2,62],74:[2,62],75:[2,62]},{10:[2,63],13:[2,63],16:[2,63],17:[2,63],18:[2,63],19:[2,63],20:[2,63],35:[2,63],37:[2,63],39:[2,63],42:[2,63],43:[2,63],44:[2,63],45:[2,63],46:[2,63],47:[2,63],48:[2,63],51:[2,63],57:[2,63],58:[2,63],59:[2,63],60:[2,63],61:[2,63],62:[2,63],63:[2,63],64:[2,63],65:[2,63],66:[2,63],67:[2,63],68:[2,63],69:[2,63],70:[2,63],71:[2,63],72:[2,63],73:[2,63],74:[2,63],75:[2,63]},{10:[2,31],13:[2,31],16:[2,31],17:[2,31],18:[2,31],19:[2,31],20:[2,31],35:[2,31],37:[2,31],39:[2,31],42:[2,31],43:[2,31],44:[2,31],45:[2,31],46:[2,31],47:[2,31],48:[2,31],51:[2,31],57:[2,31],58:[2,31],59:[2,31],60:[2,31],61:[2,31],62:[2,31],63:[2,31],64:[2,31],65:[2,31],66:[2,31],67:[2,31],68:[2,31],69:[2,31],70:[2,31],71:[2,31],72:[2,31],73:[2,31],74:[2,31],75:[2,31]},{13:[2,38],16:[2,38],17:[2,38],18:[2,38],19:[2,38],20:[2,38],35:[2,38],42:[2,38],43:[2,38],44:[2,38],45:[2,38],46:[2,38],48:[2,38],51:[2,38],58:[2,38],60:[2,38],62:[2,38],63:[2,38],65:[2,38],75:[2,38]},{22:47,35:[1,46],39:[1,129],44:[1,32],57:[1,52],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59]},{10:[2,50],13:[2,50],16:[2,50],17:[2,50],18:[2,50],19:[2,50],20:[2,50],22:47,35:[1,46],37:[2,50],39:[2,50],42:[2,50],43:[2,50],44:[1,32],45:[2,50],46:[2,50],47:[2,50],48:[2,50],51:[2,50],57:[1,52],58:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[2,50]},{47:[2,59]},{13:[2,57],22:47,35:[1,46],39:[1,130],44:[1,32],47:[2,57],57:[1,52],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59]},{10:[2,46],13:[2,46],16:[2,46],17:[2,46],18:[2,46],19:[2,46],20:[2,46],22:47,35:[1,46],37:[2,46],39:[2,46],42:[2,46],43:[2,46],44:[1,32],45:[2,46],46:[2,46],47:[2,46],48:[2,46],51:[2,46],57:[1,52],58:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[2,46]},{9:131,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:[1,29],42:[1,30],43:[1,31],44:[1,32],45:[1,33],46:[1,34],48:[1,36],51:[1,35],58:[1,37],60:[1,38],62:[1,39],63:[1,40],65:[1,41],75:[1,42]},{13:[2,58],47:[2,58],57:[2,58]},{10:[2,45],13:[2,45],16:[2,45],17:[2,45],18:[2,45],19:[2,45],20:[2,45],22:47,35:[1,46],37:[2,45],39:[2,45],42:[2,45],43:[2,45],44:[1,32],45:[2,45],46:[2,45],47:[2,45],48:[2,45],51:[2,45],57:[1,52],58:[2,45],59:[2,45],60:[2,45],61:[2,45],62:[2,45],63:[2,45],64:[1,48],65:[1,49],66:[1,50],67:[1,51],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[2,45]}],
defaultActions: {43:[2,1],108:[2,52],117:[2,36],126:[2,59]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 16
break;
case 1:return 17
break;
case 2:return 18
break;
case 3:/* ignore comment */
break;
case 4:/* ignore comment */
break;
case 5:/* ignore */
break;
case 6:return 19
break;
case 7:return 44
break;
case 8:return 11
break;
case 9:return 45
break;
case 10:return 15
break;
case 11:return 51
break;
case 12:return 48
break;
case 13:return 46
break;
case 14:return 42
break;
case 15:return 43
break;
case 16:return 20
break;
case 17:return 14
break;
case 18:return 13
break;
case 19:return '\'('
break;
case 20:return 35
break;
case 21:return 37
break;
case 22:return 62
break;
case 23:return 58
break;
case 24:return 59
break;
case 25:return 63
break;
case 26:return 60
break;
case 27:return 61
break;
case 28:return 57
break;
case 29:return 64
break;
case 30:return 65
break;
case 31:return 66
break;
case 32:return 67
break;
case 33:return '^'
break;
case 34:return 57
break;
case 35:return 68
break;
case 36:return 75
break;
case 37:return 10
break;
case 38:return 39
break;
case 39:return '.'
break;
case 40:return 71
break;
case 41:return 72
break;
case 42:return 69
break;
case 43:return 70
break;
case 44:return 73
break;
case 45:return 74
break;
case 46:return 56
break;
case 47:return 47
break;
case 48:return 5
break;
}
},
rules: [/^(?:"(?:[^\"\\]|\\"|\\\\)*")/,/^(?:\/(?:[^\/\\]|\\\/|\\\\)*\/[gi]+)/,/^(?:`(?:[^\`]|``)*`)/,/^(?:\/\/[^\n]+\n)/,/^(?:\/\*[^]+?\*\/)/,/^(?:\s+)/,/^(?:-?\d+(?:\.\d*(?:[eE]-?\d+)?|[eE]-?\d+)?)/,/^(?::\w+)/,/^(?:module\b)/,/^(?:import\b)/,/^(?:export\b)/,/^(?:fn\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:nil\b)/,/^(?:[\w\.]*\.[\w\.]*)/,/^(?:\w+)/,/^(?:'\()/,/^(?:\()/,/^(?:\))/,/^(?:#\{)/,/^(?:\{)/,/^(?:\})/,/^(?:#\[)/,/^(?:\[)/,/^(?:\])/,/^(?:&)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:\^)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?::)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}