/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"statements":4,"EOF":5,"statement":6,"moduleStatement":7,"exportStatement":8,"typeDeclaration":9,"methodDefinition":10,"expr":11,";":12,"module":13,"string":14,"export":15,"=":16,"identifier":17,"type":18,"fnExpr":19,"^":20,"regex":21,"js":22,"number":23,"nil":24,"boolean":25,"keyword":26,"importExpr":27,"ifExpr":28,"letExpr":29,"map":30,"list":31,"set":32,"bag":33,"mapAccess":34,"binaryOperation":35,"unaryOperation":36,"assignment":37,"(":38,"delimitedExprs":39,")":40,"exprOptionalComma":41,",":42,"exprsOptionalComma":43,"separatedExprs":44,"true":45,"false":46,".":47,"import":48,"if":49,":":50,"let":51,"letBindings":52,"letBinding":53,"fn":54,"fnBody":55,"[":56,"fnBodies":57,"]":58,"fnBindings":59,"nonRestParams":60,"restParam":61,"nonRestParam":62,"&":63,"{":64,"}":65,"#{":66,"#[":67,"+":68,"-":69,"/":70,"*":71,"|":72,"<":73,">":74,"<=":75,">=":76,"==":77,"!=":78,"!":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:";",13:"module",14:"string",15:"export",16:"=",17:"identifier",18:"type",20:"^",21:"regex",22:"js",23:"number",24:"nil",38:"(",40:")",42:",",45:"true",46:"false",47:".",48:"import",49:"if",50:":",51:"let",54:"fn",56:"[",58:"]",63:"&",64:"{",65:"}",66:"#{",67:"#[",68:"+",69:"-",70:"/",71:"*",72:"|",73:"<",74:">",75:"<=",76:">=",77:"==",78:"!=",79:"!"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,2],[7,3],[8,4],[8,5],[9,5],[10,6],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,4],[11,3],[11,3],[41,1],[41,2],[43,1],[43,2],[44,2],[44,3],[39,1],[39,3],[25,1],[25,1],[26,2],[27,2],[28,6],[29,4],[52,1],[52,2],[53,3],[19,2],[19,4],[57,1],[57,3],[55,3],[59,1],[59,2],[60,1],[60,2],[62,1],[62,2],[62,3],[62,4],[61,2],[30,3],[31,3],[32,3],[33,3],[34,2],[37,3],[37,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[36,2],[36,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = [$$[$0]] 
break;
case 3: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 9: this.$ = { type: 'module', name: $$[$0-1] } 
break;
case 10: this.$ = { type: 'export', value: $$[$0-1] } 
break;
case 11: this.$ = { type: 'exportedDefinition', name: $$[$0-3], value: $$[$0-1] } 
break;
case 12: this.$ = { type: 'typeDeclaration', typeName: $$[$0-3], factory: $$[$0-1] } 
break;
case 13: this.$ = { type: 'methodDefinition', typeName: $$[$0-5], methodName: $$[$0-3], value: $$[$0-1] } 
break;
case 14: this.$ = { type: 'string', value: yytext.slice(1, -1) } 
break;
case 15: this.$ = { type: 'regex', value: yytext } 
break;
case 16: this.$ = { type: 'js', value: yytext.slice(1, -1) } 
break;
case 17: this.$ = { type: 'number', value: Number(yytext) } 
break;
case 18: this.$ = { type: 'nil' } 
break;
case 21: this.$ = { type: 'identifier', value: yytext } 
break;
case 34: this.$ = { type: "chain", caller: $$[$0-2], function: $$[$0] } 
break;
case 35: this.$ = { type: 'functionCall', function: $$[$0-3], arguments: $$[$0-1] } 
break;
case 36: this.$ = { type: 'functionCall', function: $$[$0-2], arguments: [] } 
break;
case 37: this.$ = { type: 'exprList', value: $$[$0-1] } 
break;
case 40: this.$ = [$$[$0]] 
break;
case 41: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 42: this.$ = [$$[$0-1]] 
break;
case 43: $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 44: this.$ = [$$[$0]] 
break;
case 45: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 46: this.$ = { type: 'boolean', value: 'true' }; 
break;
case 47: this.$ = { type: 'boolean', value: 'false' }; 
break;
case 48: this.$ = { type: 'keyword', value: $$[$0] } 
break;
case 49: this.$ = { type: 'import', name: $$[$0] } 
break;
case 50: this.$ = { type: 'if', condition: $$[$0-4], consequent: $$[$0-2], alternative: $$[$0] } 
break;
case 51: this.$ = { type: 'let', bindings: $$[$0-2], value: $$[$0] } 
break;
case 52: this.$ = [$$[$0]]; 
break;
case 53: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 54: this.$ = { name: $$[$0-2], value: $$[$0-1] } 
break;
case 55: this.$ = { type: 'fn', bodies: [$$[$0]] } 
break;
case 56: this.$ = { type: 'fn', bodies: $$[$0-1] } 
break;
case 57: this.$ = [$$[$0]] 
break;
case 58: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 59: this.$ = { bindings: $$[$0-2], value: $$[$0] } 
break;
case 60: this.$ = $$[$0] 
break;
case 61: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 62: this.$ = [$$[$0]] 
break;
case 63: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 64: this.$ = { name: $$[$0] } 
break;
case 65: this.$ = { name: $$[$0-1] } 
break;
case 66: this.$ = { name: $$[$0-2], default: $$[$0] } 
break;
case 67: this.$ = { name: $$[$0-3], default: $$[$0-1] } 
break;
case 68: this.$ = { name: $$[$0], rest: true } 
break;
case 69: this.$ = { type: 'map', arguments: $$[$0-1] } 
break;
case 70: this.$ = { type: 'list', arguments: $$[$0-1] } 
break;
case 71: this.$ = { type: 'set', arguments: $$[$0-1] } 
break;
case 72: this.$ = { type: 'bag', arguments: $$[$0-1] } 
break;
case 73: this.$ = { type: 'mapAccess', map: $$[$0-1], key: $$[$0] } 
break;
case 74: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 75: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 76: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 77: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 78: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 79: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 80: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 81: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 82: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 83: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 84: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 85: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 86: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 87: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 88: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
case 89: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,13:[1,9],14:[1,13],15:[1,10],17:[1,12],18:[1,11],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{1:[3]},{5:[1,46],6:47,7:4,8:5,9:6,10:7,11:8,13:[1,9],14:[1,13],15:[1,10],17:[1,12],18:[1,11],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{5:[2,2],13:[2,2],14:[2,2],15:[2,2],17:[2,2],18:[2,2],21:[2,2],22:[2,2],23:[2,2],24:[2,2],38:[2,2],45:[2,2],46:[2,2],47:[2,2],48:[2,2],49:[2,2],51:[2,2],54:[2,2],56:[2,2],64:[2,2],66:[2,2],67:[2,2],69:[2,2],79:[2,2]},{5:[2,4],13:[2,4],14:[2,4],15:[2,4],17:[2,4],18:[2,4],21:[2,4],22:[2,4],23:[2,4],24:[2,4],38:[2,4],45:[2,4],46:[2,4],47:[2,4],48:[2,4],49:[2,4],51:[2,4],54:[2,4],56:[2,4],64:[2,4],66:[2,4],67:[2,4],69:[2,4],79:[2,4]},{5:[2,5],13:[2,5],14:[2,5],15:[2,5],17:[2,5],18:[2,5],21:[2,5],22:[2,5],23:[2,5],24:[2,5],38:[2,5],45:[2,5],46:[2,5],47:[2,5],48:[2,5],49:[2,5],51:[2,5],54:[2,5],56:[2,5],64:[2,5],66:[2,5],67:[2,5],69:[2,5],79:[2,5]},{5:[2,6],13:[2,6],14:[2,6],15:[2,6],17:[2,6],18:[2,6],21:[2,6],22:[2,6],23:[2,6],24:[2,6],38:[2,6],45:[2,6],46:[2,6],47:[2,6],48:[2,6],49:[2,6],51:[2,6],54:[2,6],56:[2,6],64:[2,6],66:[2,6],67:[2,6],69:[2,6],79:[2,6]},{5:[2,7],13:[2,7],14:[2,7],15:[2,7],17:[2,7],18:[2,7],21:[2,7],22:[2,7],23:[2,7],24:[2,7],38:[2,7],45:[2,7],46:[2,7],47:[2,7],48:[2,7],49:[2,7],51:[2,7],54:[2,7],56:[2,7],64:[2,7],66:[2,7],67:[2,7],69:[2,7],79:[2,7]},{12:[1,48],20:[1,49],26:51,38:[1,50],47:[1,35],63:[1,56],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{14:[1,64]},{16:[1,65],17:[1,66]},{17:[1,67]},{12:[2,21],16:[1,69],20:[1,68],38:[2,21],47:[2,21],63:[2,21],68:[2,21],69:[2,21],70:[2,21],71:[2,21],72:[2,21],73:[2,21],74:[2,21],75:[2,21],76:[2,21],77:[2,21],78:[2,21]},{12:[2,14],17:[2,14],20:[2,14],38:[2,14],40:[2,14],42:[2,14],47:[2,14],50:[2,14],58:[2,14],63:[2,14],65:[2,14],68:[2,14],69:[2,14],70:[2,14],71:[2,14],72:[2,14],73:[2,14],74:[2,14],75:[2,14],76:[2,14],77:[2,14],78:[2,14]},{12:[2,15],17:[2,15],20:[2,15],38:[2,15],40:[2,15],42:[2,15],47:[2,15],50:[2,15],58:[2,15],63:[2,15],65:[2,15],68:[2,15],69:[2,15],70:[2,15],71:[2,15],72:[2,15],73:[2,15],74:[2,15],75:[2,15],76:[2,15],77:[2,15],78:[2,15]},{12:[2,16],17:[2,16],20:[2,16],38:[2,16],40:[2,16],42:[2,16],47:[2,16],50:[2,16],58:[2,16],63:[2,16],65:[2,16],68:[2,16],69:[2,16],70:[2,16],71:[2,16],72:[2,16],73:[2,16],74:[2,16],75:[2,16],76:[2,16],77:[2,16],78:[2,16]},{12:[2,17],17:[2,17],20:[2,17],38:[2,17],40:[2,17],42:[2,17],47:[2,17],50:[2,17],58:[2,17],63:[2,17],65:[2,17],68:[2,17],69:[2,17],70:[2,17],71:[2,17],72:[2,17],73:[2,17],74:[2,17],75:[2,17],76:[2,17],77:[2,17],78:[2,17]},{12:[2,18],17:[2,18],20:[2,18],38:[2,18],40:[2,18],42:[2,18],47:[2,18],50:[2,18],58:[2,18],63:[2,18],65:[2,18],68:[2,18],69:[2,18],70:[2,18],71:[2,18],72:[2,18],73:[2,18],74:[2,18],75:[2,18],76:[2,18],77:[2,18],78:[2,18]},{12:[2,19],17:[2,19],20:[2,19],38:[2,19],40:[2,19],42:[2,19],47:[2,19],50:[2,19],58:[2,19],63:[2,19],65:[2,19],68:[2,19],69:[2,19],70:[2,19],71:[2,19],72:[2,19],73:[2,19],74:[2,19],75:[2,19],76:[2,19],77:[2,19],78:[2,19]},{12:[2,20],17:[2,20],20:[2,20],38:[2,20],40:[2,20],42:[2,20],47:[2,20],50:[2,20],58:[2,20],63:[2,20],65:[2,20],68:[2,20],69:[2,20],70:[2,20],71:[2,20],72:[2,20],73:[2,20],74:[2,20],75:[2,20],76:[2,20],77:[2,20],78:[2,20]},{12:[2,22],17:[2,22],20:[2,22],38:[2,22],40:[2,22],42:[2,22],47:[2,22],50:[2,22],58:[2,22],63:[2,22],65:[2,22],68:[2,22],69:[2,22],70:[2,22],71:[2,22],72:[2,22],73:[2,22],74:[2,22],75:[2,22],76:[2,22],77:[2,22],78:[2,22]},{12:[2,23],17:[2,23],20:[2,23],38:[2,23],40:[2,23],42:[2,23],47:[2,23],50:[2,23],58:[2,23],63:[2,23],65:[2,23],68:[2,23],69:[2,23],70:[2,23],71:[2,23],72:[2,23],73:[2,23],74:[2,23],75:[2,23],76:[2,23],77:[2,23],78:[2,23]},{12:[2,24],17:[2,24],20:[2,24],38:[2,24],40:[2,24],42:[2,24],47:[2,24],50:[2,24],58:[2,24],63:[2,24],65:[2,24],68:[2,24],69:[2,24],70:[2,24],71:[2,24],72:[2,24],73:[2,24],74:[2,24],75:[2,24],76:[2,24],77:[2,24],78:[2,24]},{12:[2,25],17:[2,25],20:[2,25],38:[2,25],40:[2,25],42:[2,25],47:[2,25],50:[2,25],58:[2,25],63:[2,25],65:[2,25],68:[2,25],69:[2,25],70:[2,25],71:[2,25],72:[2,25],73:[2,25],74:[2,25],75:[2,25],76:[2,25],77:[2,25],78:[2,25]},{12:[2,26],17:[2,26],20:[2,26],38:[2,26],40:[2,26],42:[2,26],47:[2,26],50:[2,26],58:[2,26],63:[2,26],65:[2,26],68:[2,26],69:[2,26],70:[2,26],71:[2,26],72:[2,26],73:[2,26],74:[2,26],75:[2,26],76:[2,26],77:[2,26],78:[2,26]},{12:[2,27],17:[2,27],20:[2,27],38:[2,27],40:[2,27],42:[2,27],47:[2,27],50:[2,27],58:[2,27],63:[2,27],65:[2,27],68:[2,27],69:[2,27],70:[2,27],71:[2,27],72:[2,27],73:[2,27],74:[2,27],75:[2,27],76:[2,27],77:[2,27],78:[2,27]},{12:[2,28],17:[2,28],20:[2,28],38:[2,28],40:[2,28],42:[2,28],47:[2,28],50:[2,28],58:[2,28],63:[2,28],65:[2,28],68:[2,28],69:[2,28],70:[2,28],71:[2,28],72:[2,28],73:[2,28],74:[2,28],75:[2,28],76:[2,28],77:[2,28],78:[2,28]},{12:[2,29],17:[2,29],20:[2,29],38:[2,29],40:[2,29],42:[2,29],47:[2,29],50:[2,29],58:[2,29],63:[2,29],65:[2,29],68:[2,29],69:[2,29],70:[2,29],71:[2,29],72:[2,29],73:[2,29],74:[2,29],75:[2,29],76:[2,29],77:[2,29],78:[2,29]},{12:[2,30],16:[1,70],17:[2,30],20:[2,30],38:[2,30],40:[2,30],42:[2,30],47:[2,30],50:[2,30],58:[2,30],63:[2,30],65:[2,30],68:[2,30],69:[2,30],70:[2,30],71:[2,30],72:[2,30],73:[2,30],74:[2,30],75:[2,30],76:[2,30],77:[2,30],78:[2,30]},{12:[2,31],17:[2,31],20:[2,31],38:[2,31],40:[2,31],42:[2,31],47:[2,31],50:[2,31],58:[2,31],63:[2,31],65:[2,31],68:[2,31],69:[2,31],70:[2,31],71:[2,31],72:[2,31],73:[2,31],74:[2,31],75:[2,31],76:[2,31],77:[2,31],78:[2,31]},{12:[2,32],17:[2,32],20:[2,32],38:[2,32],40:[2,32],42:[2,32],47:[2,32],50:[2,32],58:[2,32],63:[2,32],65:[2,32],68:[2,32],69:[2,32],70:[2,32],71:[2,32],72:[2,32],73:[2,32],74:[2,32],75:[2,32],76:[2,32],77:[2,32],78:[2,32]},{12:[2,33],17:[2,33],20:[2,33],38:[2,33],40:[2,33],42:[2,33],47:[2,33],50:[2,33],58:[2,33],63:[2,33],65:[2,33],68:[2,33],69:[2,33],70:[2,33],71:[2,33],72:[2,33],73:[2,33],74:[2,33],75:[2,33],76:[2,33],77:[2,33],78:[2,33]},{11:72,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],39:71,45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{12:[2,46],17:[2,46],20:[2,46],38:[2,46],40:[2,46],42:[2,46],47:[2,46],50:[2,46],58:[2,46],63:[2,46],65:[2,46],68:[2,46],69:[2,46],70:[2,46],71:[2,46],72:[2,46],73:[2,46],74:[2,46],75:[2,46],76:[2,46],77:[2,46],78:[2,46]},{12:[2,47],17:[2,47],20:[2,47],38:[2,47],40:[2,47],42:[2,47],47:[2,47],50:[2,47],58:[2,47],63:[2,47],65:[2,47],68:[2,47],69:[2,47],70:[2,47],71:[2,47],72:[2,47],73:[2,47],74:[2,47],75:[2,47],76:[2,47],77:[2,47],78:[2,47]},{17:[1,74]},{14:[1,75]},{11:76,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{17:[1,82],55:77,56:[1,78],59:79,60:80,62:81},{17:[1,85],52:83,53:84},{11:72,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],39:86,45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:72,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],39:87,45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:72,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],39:88,45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:72,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],39:89,45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:90,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:91,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{1:[2,1]},{5:[2,3],13:[2,3],14:[2,3],15:[2,3],17:[2,3],18:[2,3],21:[2,3],22:[2,3],23:[2,3],24:[2,3],38:[2,3],45:[2,3],46:[2,3],47:[2,3],48:[2,3],49:[2,3],51:[2,3],54:[2,3],56:[2,3],64:[2,3],66:[2,3],67:[2,3],69:[2,3],79:[2,3]},{5:[2,8],13:[2,8],14:[2,8],15:[2,8],17:[2,8],18:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],38:[2,8],45:[2,8],46:[2,8],47:[2,8],48:[2,8],49:[2,8],51:[2,8],54:[2,8],56:[2,8],64:[2,8],66:[2,8],67:[2,8],69:[2,8],79:[2,8]},{11:92,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:72,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],39:93,40:[1,94],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{12:[2,73],16:[2,73],17:[2,73],20:[2,73],38:[2,73],40:[2,73],42:[2,73],47:[2,73],50:[2,73],58:[2,73],63:[2,73],65:[2,73],68:[2,73],69:[2,73],70:[2,73],71:[2,73],72:[2,73],73:[2,73],74:[2,73],75:[2,73],76:[2,73],77:[2,73],78:[2,73]},{11:95,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:96,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:97,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:98,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:99,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:100,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:101,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:102,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:103,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:104,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:105,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:106,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{12:[1,107]},{11:108,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{16:[1,109]},{16:[1,110]},{17:[1,111]},{11:112,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:113,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{40:[1,114],42:[1,115]},{20:[1,49],26:51,38:[1,50],40:[2,44],42:[2,44],47:[1,35],58:[2,44],63:[1,56],65:[2,44],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{12:[2,21],16:[1,69],17:[2,21],20:[2,21],38:[2,21],40:[2,21],42:[2,21],47:[2,21],50:[2,21],58:[2,21],63:[2,21],65:[2,21],68:[2,21],69:[2,21],70:[2,21],71:[2,21],72:[2,21],73:[2,21],74:[2,21],75:[2,21],76:[2,21],77:[2,21],78:[2,21]},{12:[2,48],16:[2,48],17:[2,48],20:[2,48],38:[2,48],40:[2,48],42:[2,48],47:[2,48],50:[2,48],58:[2,48],63:[2,48],65:[2,48],68:[2,48],69:[2,48],70:[2,48],71:[2,48],72:[2,48],73:[2,48],74:[2,48],75:[2,48],76:[2,48],77:[2,48],78:[2,48]},{12:[2,49],17:[2,49],20:[2,49],38:[2,49],40:[2,49],42:[2,49],47:[2,49],50:[2,49],58:[2,49],63:[2,49],65:[2,49],68:[2,49],69:[2,49],70:[2,49],71:[2,49],72:[2,49],73:[2,49],74:[2,49],75:[2,49],76:[2,49],77:[2,49],78:[2,49]},{20:[1,49],26:51,38:[1,50],47:[1,35],50:[1,116],63:[1,56],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{12:[2,55],17:[2,55],20:[2,55],38:[2,55],40:[2,55],42:[2,55],47:[2,55],50:[2,55],58:[2,55],63:[2,55],65:[2,55],68:[2,55],69:[2,55],70:[2,55],71:[2,55],72:[2,55],73:[2,55],74:[2,55],75:[2,55],76:[2,55],77:[2,55],78:[2,55]},{17:[1,82],55:118,57:117,59:79,60:80,62:81},{50:[1,119]},{17:[1,82],50:[2,60],61:120,62:121,63:[1,122]},{17:[2,62],50:[2,62],63:[2,62]},{16:[1,124],17:[2,64],42:[1,123],50:[2,64],63:[2,64]},{17:[1,85],50:[1,125],53:126},{17:[2,52],50:[2,52]},{16:[1,127]},{42:[1,115],65:[1,128]},{42:[1,115],58:[1,129]},{42:[1,115],65:[1,130]},{42:[1,115],58:[1,131]},{12:[2,88],17:[2,88],20:[1,49],26:51,38:[1,50],40:[2,88],42:[2,88],47:[1,35],50:[2,88],58:[2,88],63:[2,88],65:[2,88],68:[2,88],69:[2,88],70:[1,54],71:[1,55],72:[2,88],73:[2,88],74:[2,88],75:[2,88],76:[2,88],77:[2,88],78:[2,88]},{12:[2,89],17:[2,89],20:[1,49],26:51,38:[1,50],40:[2,89],42:[2,89],47:[1,35],50:[2,89],58:[2,89],63:[2,89],65:[2,89],68:[2,89],69:[2,89],70:[2,89],71:[2,89],72:[2,89],73:[2,89],74:[2,89],75:[2,89],76:[2,89],77:[2,89],78:[2,89]},{12:[2,34],17:[2,34],20:[2,34],26:51,38:[1,50],40:[2,34],42:[2,34],47:[1,35],50:[2,34],58:[2,34],63:[2,34],65:[2,34],68:[2,34],69:[2,34],70:[2,34],71:[2,34],72:[2,34],73:[2,34],74:[2,34],75:[2,34],76:[2,34],77:[2,34],78:[2,34]},{40:[1,132],42:[1,115]},{12:[2,36],17:[2,36],20:[2,36],38:[2,36],40:[2,36],42:[2,36],47:[2,36],50:[2,36],58:[2,36],63:[2,36],65:[2,36],68:[2,36],69:[2,36],70:[2,36],71:[2,36],72:[2,36],73:[2,36],74:[2,36],75:[2,36],76:[2,36],77:[2,36],78:[2,36]},{12:[2,76],17:[2,76],20:[1,49],26:51,38:[1,50],40:[2,76],42:[2,76],47:[1,35],50:[2,76],58:[2,76],63:[2,76],65:[2,76],68:[2,76],69:[2,76],70:[1,54],71:[1,55],72:[2,76],73:[2,76],74:[2,76],75:[2,76],76:[2,76],77:[2,76],78:[2,76]},{12:[2,77],17:[2,77],20:[1,49],26:51,38:[1,50],40:[2,77],42:[2,77],47:[1,35],50:[2,77],58:[2,77],63:[2,77],65:[2,77],68:[2,77],69:[2,77],70:[1,54],71:[1,55],72:[2,77],73:[2,77],74:[2,77],75:[2,77],76:[2,77],77:[2,77],78:[2,77]},{12:[2,78],17:[2,78],20:[1,49],26:51,38:[1,50],40:[2,78],42:[2,78],47:[1,35],50:[2,78],58:[2,78],63:[2,78],65:[2,78],68:[2,78],69:[2,78],70:[2,78],71:[2,78],72:[2,78],73:[2,78],74:[2,78],75:[2,78],76:[2,78],77:[2,78],78:[2,78]},{12:[2,79],17:[2,79],20:[1,49],26:51,38:[1,50],40:[2,79],42:[2,79],47:[1,35],50:[2,79],58:[2,79],63:[2,79],65:[2,79],68:[2,79],69:[2,79],70:[2,79],71:[2,79],72:[2,79],73:[2,79],74:[2,79],75:[2,79],76:[2,79],77:[2,79],78:[2,79]},{12:[2,80],17:[2,80],20:[1,49],26:51,38:[1,50],40:[2,80],42:[2,80],47:[1,35],50:[2,80],58:[2,80],63:[2,80],65:[2,80],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,80],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{12:[2,81],17:[2,81],20:[1,49],26:51,38:[1,50],40:[2,81],42:[2,81],47:[1,35],50:[2,81],58:[2,81],63:[1,56],65:[2,81],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,81],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{12:[2,82],17:[2,82],20:[1,49],26:51,38:[1,50],40:[2,82],42:[2,82],47:[1,35],50:[2,82],58:[2,82],63:[2,82],65:[2,82],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,82],73:[2,82],74:[2,82],75:[2,82],76:[2,82],77:[2,82],78:[2,82]},{12:[2,83],17:[2,83],20:[1,49],26:51,38:[1,50],40:[2,83],42:[2,83],47:[1,35],50:[2,83],58:[2,83],63:[2,83],65:[2,83],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,83],73:[2,83],74:[2,83],75:[2,83],76:[2,83],77:[2,83],78:[2,83]},{12:[2,84],17:[2,84],20:[1,49],26:51,38:[1,50],40:[2,84],42:[2,84],47:[1,35],50:[2,84],58:[2,84],63:[2,84],65:[2,84],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,84],73:[2,84],74:[2,84],75:[2,84],76:[2,84],77:[2,84],78:[2,84]},{12:[2,85],17:[2,85],20:[1,49],26:51,38:[1,50],40:[2,85],42:[2,85],47:[1,35],50:[2,85],58:[2,85],63:[2,85],65:[2,85],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,85],73:[2,85],74:[2,85],75:[2,85],76:[2,85],77:[2,85],78:[2,85]},{12:[2,86],17:[2,86],20:[1,49],26:51,38:[1,50],40:[2,86],42:[2,86],47:[1,35],50:[2,86],58:[2,86],63:[2,86],65:[2,86],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,86],73:[2,86],74:[2,86],75:[2,86],76:[2,86],77:[2,86],78:[2,86]},{12:[2,87],17:[2,87],20:[1,49],26:51,38:[1,50],40:[2,87],42:[2,87],47:[1,35],50:[2,87],58:[2,87],63:[2,87],65:[2,87],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[2,87],73:[2,87],74:[2,87],75:[2,87],76:[2,87],77:[2,87],78:[2,87]},{5:[2,9],13:[2,9],14:[2,9],15:[2,9],17:[2,9],18:[2,9],21:[2,9],22:[2,9],23:[2,9],24:[2,9],38:[2,9],45:[2,9],46:[2,9],47:[2,9],48:[2,9],49:[2,9],51:[2,9],54:[2,9],56:[2,9],64:[2,9],66:[2,9],67:[2,9],69:[2,9],79:[2,9]},{12:[1,133],20:[1,49],26:51,38:[1,50],47:[1,35],63:[1,56],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{11:134,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{19:135,54:[1,38]},{16:[1,136]},{12:[2,74],17:[2,74],20:[1,49],26:51,38:[1,50],40:[2,74],42:[2,74],47:[1,35],50:[2,74],58:[2,74],63:[1,56],65:[2,74],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{12:[2,75],17:[2,75],20:[1,49],26:51,38:[1,50],40:[2,75],42:[2,75],47:[1,35],50:[2,75],58:[2,75],63:[1,56],65:[2,75],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{12:[2,37],17:[2,37],20:[2,37],38:[2,37],40:[2,37],42:[2,37],47:[2,37],50:[2,37],58:[2,37],63:[2,37],65:[2,37],68:[2,37],69:[2,37],70:[2,37],71:[2,37],72:[2,37],73:[2,37],74:[2,37],75:[2,37],76:[2,37],77:[2,37],78:[2,37]},{11:137,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:138,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{42:[1,140],58:[1,139]},{42:[2,57],58:[2,57]},{11:141,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{50:[2,61]},{17:[2,63],50:[2,63],63:[2,63]},{17:[1,142]},{17:[2,65],50:[2,65],63:[2,65]},{11:143,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{11:144,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{17:[2,53],50:[2,53]},{11:146,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],41:145,45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{12:[2,69],17:[2,69],20:[2,69],38:[2,69],40:[2,69],42:[2,69],47:[2,69],50:[2,69],58:[2,69],63:[2,69],65:[2,69],68:[2,69],69:[2,69],70:[2,69],71:[2,69],72:[2,69],73:[2,69],74:[2,69],75:[2,69],76:[2,69],77:[2,69],78:[2,69]},{12:[2,70],17:[2,70],20:[2,70],38:[2,70],40:[2,70],42:[2,70],47:[2,70],50:[2,70],58:[2,70],63:[2,70],65:[2,70],68:[2,70],69:[2,70],70:[2,70],71:[2,70],72:[2,70],73:[2,70],74:[2,70],75:[2,70],76:[2,70],77:[2,70],78:[2,70]},{12:[2,71],17:[2,71],20:[2,71],38:[2,71],40:[2,71],42:[2,71],47:[2,71],50:[2,71],58:[2,71],63:[2,71],65:[2,71],68:[2,71],69:[2,71],70:[2,71],71:[2,71],72:[2,71],73:[2,71],74:[2,71],75:[2,71],76:[2,71],77:[2,71],78:[2,71]},{12:[2,72],17:[2,72],20:[2,72],38:[2,72],40:[2,72],42:[2,72],47:[2,72],50:[2,72],58:[2,72],63:[2,72],65:[2,72],68:[2,72],69:[2,72],70:[2,72],71:[2,72],72:[2,72],73:[2,72],74:[2,72],75:[2,72],76:[2,72],77:[2,72],78:[2,72]},{12:[2,35],17:[2,35],20:[2,35],38:[2,35],40:[2,35],42:[2,35],47:[2,35],50:[2,35],58:[2,35],63:[2,35],65:[2,35],68:[2,35],69:[2,35],70:[2,35],71:[2,35],72:[2,35],73:[2,35],74:[2,35],75:[2,35],76:[2,35],77:[2,35],78:[2,35]},{5:[2,10],13:[2,10],14:[2,10],15:[2,10],17:[2,10],18:[2,10],21:[2,10],22:[2,10],23:[2,10],24:[2,10],38:[2,10],45:[2,10],46:[2,10],47:[2,10],48:[2,10],49:[2,10],51:[2,10],54:[2,10],56:[2,10],64:[2,10],66:[2,10],67:[2,10],69:[2,10],79:[2,10]},{12:[1,147],20:[1,49],26:51,38:[1,50],47:[1,35],63:[1,56],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{12:[1,148]},{19:149,54:[1,38]},{20:[1,49],26:51,38:[1,50],40:[2,45],42:[2,45],47:[1,35],58:[2,45],63:[1,56],65:[2,45],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{20:[1,49],26:51,38:[1,50],42:[1,150],47:[1,35],63:[1,56],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{12:[2,56],17:[2,56],20:[2,56],38:[2,56],40:[2,56],42:[2,56],47:[2,56],50:[2,56],58:[2,56],63:[2,56],65:[2,56],68:[2,56],69:[2,56],70:[2,56],71:[2,56],72:[2,56],73:[2,56],74:[2,56],75:[2,56],76:[2,56],77:[2,56],78:[2,56]},{17:[1,82],55:151,59:79,60:80,62:81},{12:[2,59],17:[2,59],20:[1,49],26:51,38:[1,50],40:[2,59],42:[2,59],47:[1,35],50:[2,59],58:[2,59],63:[1,56],65:[2,59],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{50:[2,68]},{17:[2,66],20:[1,49],26:51,38:[1,50],42:[1,152],47:[1,35],50:[2,66],63:[1,56],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{12:[2,51],17:[2,51],20:[1,49],26:51,38:[1,50],40:[2,51],42:[2,51],47:[1,35],50:[2,51],58:[2,51],63:[1,56],65:[2,51],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{17:[2,54],50:[2,54]},{17:[2,38],20:[1,49],26:51,38:[1,50],42:[1,153],47:[1,35],50:[2,38],63:[1,56],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]},{5:[2,11],13:[2,11],14:[2,11],15:[2,11],17:[2,11],18:[2,11],21:[2,11],22:[2,11],23:[2,11],24:[2,11],38:[2,11],45:[2,11],46:[2,11],47:[2,11],48:[2,11],49:[2,11],51:[2,11],54:[2,11],56:[2,11],64:[2,11],66:[2,11],67:[2,11],69:[2,11],79:[2,11]},{5:[2,12],13:[2,12],14:[2,12],15:[2,12],17:[2,12],18:[2,12],21:[2,12],22:[2,12],23:[2,12],24:[2,12],38:[2,12],45:[2,12],46:[2,12],47:[2,12],48:[2,12],49:[2,12],51:[2,12],54:[2,12],56:[2,12],64:[2,12],66:[2,12],67:[2,12],69:[2,12],79:[2,12]},{12:[1,154]},{11:155,14:[1,13],17:[1,73],19:22,21:[1,14],22:[1,15],23:[1,16],24:[1,17],25:18,26:19,27:20,28:21,29:23,30:24,31:25,32:26,33:27,34:28,35:29,36:30,37:31,38:[1,32],45:[1,33],46:[1,34],47:[1,35],48:[1,36],49:[1,37],51:[1,39],54:[1,38],56:[1,41],64:[1,40],66:[1,42],67:[1,43],69:[1,44],79:[1,45]},{42:[2,58],58:[2,58]},{17:[2,67],50:[2,67],63:[2,67]},{17:[2,39],50:[2,39]},{5:[2,13],13:[2,13],14:[2,13],15:[2,13],17:[2,13],18:[2,13],21:[2,13],22:[2,13],23:[2,13],24:[2,13],38:[2,13],45:[2,13],46:[2,13],47:[2,13],48:[2,13],49:[2,13],51:[2,13],54:[2,13],56:[2,13],64:[2,13],66:[2,13],67:[2,13],69:[2,13],79:[2,13]},{12:[2,50],17:[2,50],20:[1,49],26:51,38:[1,50],40:[2,50],42:[2,50],47:[1,35],50:[2,50],58:[2,50],63:[1,56],65:[2,50],68:[1,52],69:[1,53],70:[1,54],71:[1,55],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,63]}],
defaultActions: {46:[2,1],120:[2,61],142:[2,68]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 14
break;
case 1:return 21
break;
case 2:return 22
break;
case 3:/* ignore comment */
break;
case 4:/* ignore comment */
break;
case 5:/* ignore whitespace */
break;
case 6:return 23
break;
case 7:return 13
break;
case 8:return 48
break;
case 9:return 15
break;
case 10:return 18
break;
case 11:return 54
break;
case 12:return 51
break;
case 13:return 49
break;
case 14:return 45
break;
case 15:return 46
break;
case 16:return 24
break;
case 17:return 17
break;
case 18:return '\'('
break;
case 19:return 38
break;
case 20:return 40
break;
case 21:return 66
break;
case 22:return 64
break;
case 23:return 65
break;
case 24:return 67
break;
case 25:return 56
break;
case 26:return 58
break;
case 27:return 63
break;
case 28:return 68
break;
case 29:return 69
break;
case 30:return 70
break;
case 31:return 71
break;
case 32:return 20
break;
case 33:return 63
break;
case 34:return 72
break;
case 35:return 79
break;
case 36:return 12
break;
case 37:return 42
break;
case 38:return 47
break;
case 39:return 75
break;
case 40:return 76
break;
case 41:return 73
break;
case 42:return 74
break;
case 43:return 77
break;
case 44:return 78
break;
case 45:return 16
break;
case 46:return 50
break;
case 47:return 20
break;
case 48:return '#'
break;
case 49:return '~'
break;
case 50:return 5
break;
}
},
rules: [/^(?:"(?:[^\"\\]|\\"|\\\\)*")/,/^(?:\/(?:[^\/\\]|\\\/|\\\\)*\/[gi]+)/,/^(?:`(?:[^\`]|``)*`)/,/^(?:\/\/[^\n]+\n)/,/^(?:\/\*[^]+?\*\/)/,/^(?:\s+)/,/^(?:-?\d+(?:\.\d*(?:[eE]-?\d+)?|[eE]-?\d+)?)/,/^(?:module\b)/,/^(?:import\b)/,/^(?:export\b)/,/^(?:type\b)/,/^(?:fn\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:nil\b)/,/^(?:\w+)/,/^(?:'\()/,/^(?:\()/,/^(?:\))/,/^(?:#\{)/,/^(?:\{)/,/^(?:\})/,/^(?:#\[)/,/^(?:\[)/,/^(?:\])/,/^(?:&)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:\^)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?::)/,/^(?:\^)/,/^(?:#)/,/^(?:~)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}