/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"statements":4,"EOF":5,"statement":6,"moduleStatement":7,"exportStatement":8,"expr":9,";":10,"module":11,"moduleIdentifier":12,"identifier":13,"identifierWithPeriods":14,"export":15,"string":16,"regex":17,"js":18,"number":19,"nil":20,"boolean":21,"keywordLiteral":22,"importExpr":23,"ifExpr":24,"fnExpr":25,"mfnExpr":26,"letExpr":27,"map":28,"list":29,"set":30,"bag":31,"mapAccess":32,"binaryOperation":33,"unaryOperation":34,"assignment":35,".":36,"(":37,"delimitedExprs":38,")":39,"exprOptionalComma":40,",":41,"exprsOptionalComma":42,"separatedExprs":43,"true":44,"false":45,"keyword":46,"import":47,"if":48,":":49,"let":50,"letBindings":51,"letBinding":52,"=":53,"fn":54,"fnBody":55,"[":56,"fnBodies":57,"]":58,"fnBindings":59,"nonRestParams":60,"restParam":61,"nonRestParam":62,"&":63,"{":64,"}":65,"#{":66,"#[":67,"+":68,"-":69,"/":70,"*":71,"|":72,"<":73,">":74,"<=":75,">=":76,"==":77,"!=":78,"!":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",11:"module",13:"identifier",14:"identifierWithPeriods",15:"export",16:"string",17:"regex",18:"js",19:"number",20:"nil",26:"mfnExpr",36:".",37:"(",39:")",41:",",44:"true",45:"false",46:"keyword",47:"import",48:"if",49:":",50:"let",53:"=",54:"fn",56:"[",58:"]",63:"&",64:"{",65:"}",66:"#{",67:"#[",68:"+",69:"-",70:"/",71:"*",72:"|",73:"<",74:">",75:"<=",76:">=",77:"==",78:"!=",79:"!"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,2],[7,3],[12,1],[12,1],[8,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,4],[9,3],[40,1],[40,2],[42,1],[42,2],[43,2],[43,3],[38,1],[38,3],[21,1],[21,1],[22,1],[23,2],[24,6],[27,4],[51,1],[51,2],[52,3],[25,2],[25,4],[57,1],[57,3],[55,3],[59,1],[59,2],[60,1],[60,2],[62,1],[62,2],[62,3],[62,4],[61,2],[28,3],[29,3],[30,3],[31,3],[32,2],[35,3],[35,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[34,2],[34,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = [$$[$0]] 
break;
case 3: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = { type: 'module', name: $$[$0-1] } 
break;
case 10: this.$ = { type: 'export', value: $$[$0-1] } 
break;
case 11: this.$ = { type: 'string', value: yytext.slice(1, -1) } 
break;
case 12: this.$ = { type: 'regex', value: yytext } 
break;
case 13: this.$ = { type: 'js', value: yytext.slice(1, -1) } 
break;
case 14: this.$ = { type: 'number', value: Number(yytext) } 
break;
case 15: this.$ = { type: 'nil' } 
break;
case 18: this.$ = { type: 'identifier', value: yytext } 
break;
case 32: this.$ = { type: "dotExpression", caller: $$[$0-2], function: $$[$0] } 
break;
case 33: this.$ = { type: 'functionCall', function: $$[$0-3], arguments: $$[$0-1] } 
break;
case 34: this.$ = { type: 'exprList', value: $$[$0-1] } 
break;
case 37: this.$ = [$$[$0]] 
break;
case 38: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 39: this.$ = [$$[$0-1]] 
break;
case 40: $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 41: this.$ = [$$[$0]] 
break;
case 42: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 43: this.$ = { type: 'boolean', value: 'true' }; 
break;
case 44: this.$ = { type: 'boolean', value: 'false' }; 
break;
case 45: this.$ = { type: 'keyword', value: yytext.slice(1) } 
break;
case 46: this.$ = { type: 'import', name: $$[$0] } 
break;
case 47: this.$ = { type: 'if', condition: $$[$0-4], consequent: $$[$0-2], alternative: $$[$0] } 
break;
case 48: this.$ = { type: 'let', bindings: $$[$0-2], value: $$[$0] } 
break;
case 49: this.$ = [$$[$0]]; 
break;
case 50: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 51: this.$ = { name: $$[$0-2], value: $$[$0-1] } 
break;
case 52: this.$ = { type: 'fn', bodies: [$$[$0]] } 
break;
case 53: this.$ = { type: 'fn', bodies: $$[$0-1] } 
break;
case 54: this.$ = [$$[$0]] 
break;
case 55: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 56: this.$ = { bindings: $$[$0-2], value: $$[$0] } 
break;
case 57: this.$ = $$[$0] 
break;
case 58: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 59: this.$ = [$$[$0]] 
break;
case 60: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 61: this.$ = { name: $$[$0] } 
break;
case 62: this.$ = { name: $$[$0-1] } 
break;
case 63: this.$ = { name: $$[$0-2], default: $$[$0] } 
break;
case 64: this.$ = { name: $$[$0-3], default: $$[$0-1] } 
break;
case 65: this.$ = { name: $$[$0], rest: true } 
break;
case 66: this.$ = { type: 'map', arguments: $$[$0-1] } 
break;
case 67: this.$ = { type: 'list', arguments: $$[$0-1] } 
break;
case 68: this.$ = { type: 'set', arguments: $$[$0-1] } 
break;
case 69: this.$ = { type: 'bag', arguments: $$[$0-1] } 
break;
case 70: this.$ = { type: 'mapAccess', map: $$[$0-1], key: $$[$0] } 
break;
case 71: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 72: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 73: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 74: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 75: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 76: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 77: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 78: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 79: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 80: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 81: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 82: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 83: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 84: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 85: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
case 86: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,11:[1,7],13:[1,16],15:[1,8],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{1:[3]},{5:[1,44],6:45,7:4,8:5,9:6,11:[1,7],13:[1,16],15:[1,8],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{5:[2,2],11:[2,2],13:[2,2],15:[2,2],16:[2,2],17:[2,2],18:[2,2],19:[2,2],20:[2,2],26:[2,2],37:[2,2],44:[2,2],45:[2,2],46:[2,2],47:[2,2],48:[2,2],50:[2,2],54:[2,2],56:[2,2],64:[2,2],66:[2,2],67:[2,2],69:[2,2],79:[2,2]},{5:[2,4],11:[2,4],13:[2,4],15:[2,4],16:[2,4],17:[2,4],18:[2,4],19:[2,4],20:[2,4],26:[2,4],37:[2,4],44:[2,4],45:[2,4],46:[2,4],47:[2,4],48:[2,4],50:[2,4],54:[2,4],56:[2,4],64:[2,4],66:[2,4],67:[2,4],69:[2,4],79:[2,4]},{5:[2,5],11:[2,5],13:[2,5],15:[2,5],16:[2,5],17:[2,5],18:[2,5],19:[2,5],20:[2,5],26:[2,5],37:[2,5],44:[2,5],45:[2,5],46:[2,5],47:[2,5],48:[2,5],50:[2,5],54:[2,5],56:[2,5],64:[2,5],66:[2,5],67:[2,5],69:[2,5],79:[2,5]},{10:[1,46],22:49,36:[1,47],37:[1,48],46:[1,33],63:[1,54],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{12:62,13:[1,63],14:[1,64]},{9:65,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{10:[2,11],13:[2,11],36:[2,11],37:[2,11],39:[2,11],41:[2,11],46:[2,11],49:[2,11],58:[2,11],63:[2,11],65:[2,11],68:[2,11],69:[2,11],70:[2,11],71:[2,11],72:[2,11],73:[2,11],74:[2,11],75:[2,11],76:[2,11],77:[2,11],78:[2,11]},{10:[2,12],13:[2,12],36:[2,12],37:[2,12],39:[2,12],41:[2,12],46:[2,12],49:[2,12],58:[2,12],63:[2,12],65:[2,12],68:[2,12],69:[2,12],70:[2,12],71:[2,12],72:[2,12],73:[2,12],74:[2,12],75:[2,12],76:[2,12],77:[2,12],78:[2,12]},{10:[2,13],13:[2,13],36:[2,13],37:[2,13],39:[2,13],41:[2,13],46:[2,13],49:[2,13],58:[2,13],63:[2,13],65:[2,13],68:[2,13],69:[2,13],70:[2,13],71:[2,13],72:[2,13],73:[2,13],74:[2,13],75:[2,13],76:[2,13],77:[2,13],78:[2,13]},{10:[2,14],13:[2,14],36:[2,14],37:[2,14],39:[2,14],41:[2,14],46:[2,14],49:[2,14],58:[2,14],63:[2,14],65:[2,14],68:[2,14],69:[2,14],70:[2,14],71:[2,14],72:[2,14],73:[2,14],74:[2,14],75:[2,14],76:[2,14],77:[2,14],78:[2,14]},{10:[2,15],13:[2,15],36:[2,15],37:[2,15],39:[2,15],41:[2,15],46:[2,15],49:[2,15],58:[2,15],63:[2,15],65:[2,15],68:[2,15],69:[2,15],70:[2,15],71:[2,15],72:[2,15],73:[2,15],74:[2,15],75:[2,15],76:[2,15],77:[2,15],78:[2,15]},{10:[2,16],13:[2,16],36:[2,16],37:[2,16],39:[2,16],41:[2,16],46:[2,16],49:[2,16],58:[2,16],63:[2,16],65:[2,16],68:[2,16],69:[2,16],70:[2,16],71:[2,16],72:[2,16],73:[2,16],74:[2,16],75:[2,16],76:[2,16],77:[2,16],78:[2,16]},{10:[2,17],13:[2,17],36:[2,17],37:[2,17],39:[2,17],41:[2,17],46:[2,17],49:[2,17],58:[2,17],63:[2,17],65:[2,17],68:[2,17],69:[2,17],70:[2,17],71:[2,17],72:[2,17],73:[2,17],74:[2,17],75:[2,17],76:[2,17],77:[2,17],78:[2,17]},{10:[2,18],13:[2,18],36:[2,18],37:[2,18],39:[2,18],41:[2,18],46:[2,18],49:[2,18],53:[1,66],58:[2,18],63:[2,18],65:[2,18],68:[2,18],69:[2,18],70:[2,18],71:[2,18],72:[2,18],73:[2,18],74:[2,18],75:[2,18],76:[2,18],77:[2,18],78:[2,18]},{10:[2,19],13:[2,19],36:[2,19],37:[2,19],39:[2,19],41:[2,19],46:[2,19],49:[2,19],58:[2,19],63:[2,19],65:[2,19],68:[2,19],69:[2,19],70:[2,19],71:[2,19],72:[2,19],73:[2,19],74:[2,19],75:[2,19],76:[2,19],77:[2,19],78:[2,19]},{10:[2,20],13:[2,20],36:[2,20],37:[2,20],39:[2,20],41:[2,20],46:[2,20],49:[2,20],58:[2,20],63:[2,20],65:[2,20],68:[2,20],69:[2,20],70:[2,20],71:[2,20],72:[2,20],73:[2,20],74:[2,20],75:[2,20],76:[2,20],77:[2,20],78:[2,20]},{10:[2,21],13:[2,21],36:[2,21],37:[2,21],39:[2,21],41:[2,21],46:[2,21],49:[2,21],58:[2,21],63:[2,21],65:[2,21],68:[2,21],69:[2,21],70:[2,21],71:[2,21],72:[2,21],73:[2,21],74:[2,21],75:[2,21],76:[2,21],77:[2,21],78:[2,21]},{10:[2,22],13:[2,22],36:[2,22],37:[2,22],39:[2,22],41:[2,22],46:[2,22],49:[2,22],58:[2,22],63:[2,22],65:[2,22],68:[2,22],69:[2,22],70:[2,22],71:[2,22],72:[2,22],73:[2,22],74:[2,22],75:[2,22],76:[2,22],77:[2,22],78:[2,22]},{10:[2,23],13:[2,23],36:[2,23],37:[2,23],39:[2,23],41:[2,23],46:[2,23],49:[2,23],58:[2,23],63:[2,23],65:[2,23],68:[2,23],69:[2,23],70:[2,23],71:[2,23],72:[2,23],73:[2,23],74:[2,23],75:[2,23],76:[2,23],77:[2,23],78:[2,23]},{10:[2,24],13:[2,24],36:[2,24],37:[2,24],39:[2,24],41:[2,24],46:[2,24],49:[2,24],58:[2,24],63:[2,24],65:[2,24],68:[2,24],69:[2,24],70:[2,24],71:[2,24],72:[2,24],73:[2,24],74:[2,24],75:[2,24],76:[2,24],77:[2,24],78:[2,24]},{10:[2,25],13:[2,25],36:[2,25],37:[2,25],39:[2,25],41:[2,25],46:[2,25],49:[2,25],58:[2,25],63:[2,25],65:[2,25],68:[2,25],69:[2,25],70:[2,25],71:[2,25],72:[2,25],73:[2,25],74:[2,25],75:[2,25],76:[2,25],77:[2,25],78:[2,25]},{10:[2,26],13:[2,26],36:[2,26],37:[2,26],39:[2,26],41:[2,26],46:[2,26],49:[2,26],58:[2,26],63:[2,26],65:[2,26],68:[2,26],69:[2,26],70:[2,26],71:[2,26],72:[2,26],73:[2,26],74:[2,26],75:[2,26],76:[2,26],77:[2,26],78:[2,26]},{10:[2,27],13:[2,27],36:[2,27],37:[2,27],39:[2,27],41:[2,27],46:[2,27],49:[2,27],58:[2,27],63:[2,27],65:[2,27],68:[2,27],69:[2,27],70:[2,27],71:[2,27],72:[2,27],73:[2,27],74:[2,27],75:[2,27],76:[2,27],77:[2,27],78:[2,27]},{10:[2,28],13:[2,28],36:[2,28],37:[2,28],39:[2,28],41:[2,28],46:[2,28],49:[2,28],53:[1,67],58:[2,28],63:[2,28],65:[2,28],68:[2,28],69:[2,28],70:[2,28],71:[2,28],72:[2,28],73:[2,28],74:[2,28],75:[2,28],76:[2,28],77:[2,28],78:[2,28]},{10:[2,29],13:[2,29],36:[2,29],37:[2,29],39:[2,29],41:[2,29],46:[2,29],49:[2,29],58:[2,29],63:[2,29],65:[2,29],68:[2,29],69:[2,29],70:[2,29],71:[2,29],72:[2,29],73:[2,29],74:[2,29],75:[2,29],76:[2,29],77:[2,29],78:[2,29]},{10:[2,30],13:[2,30],36:[2,30],37:[2,30],39:[2,30],41:[2,30],46:[2,30],49:[2,30],58:[2,30],63:[2,30],65:[2,30],68:[2,30],69:[2,30],70:[2,30],71:[2,30],72:[2,30],73:[2,30],74:[2,30],75:[2,30],76:[2,30],77:[2,30],78:[2,30]},{10:[2,31],13:[2,31],36:[2,31],37:[2,31],39:[2,31],41:[2,31],46:[2,31],49:[2,31],58:[2,31],63:[2,31],65:[2,31],68:[2,31],69:[2,31],70:[2,31],71:[2,31],72:[2,31],73:[2,31],74:[2,31],75:[2,31],76:[2,31],77:[2,31],78:[2,31]},{9:69,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],38:68,44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{10:[2,43],13:[2,43],36:[2,43],37:[2,43],39:[2,43],41:[2,43],46:[2,43],49:[2,43],58:[2,43],63:[2,43],65:[2,43],68:[2,43],69:[2,43],70:[2,43],71:[2,43],72:[2,43],73:[2,43],74:[2,43],75:[2,43],76:[2,43],77:[2,43],78:[2,43]},{10:[2,44],13:[2,44],36:[2,44],37:[2,44],39:[2,44],41:[2,44],46:[2,44],49:[2,44],58:[2,44],63:[2,44],65:[2,44],68:[2,44],69:[2,44],70:[2,44],71:[2,44],72:[2,44],73:[2,44],74:[2,44],75:[2,44],76:[2,44],77:[2,44],78:[2,44]},{10:[2,45],13:[2,45],36:[2,45],37:[2,45],39:[2,45],41:[2,45],46:[2,45],49:[2,45],53:[2,45],58:[2,45],63:[2,45],65:[2,45],68:[2,45],69:[2,45],70:[2,45],71:[2,45],72:[2,45],73:[2,45],74:[2,45],75:[2,45],76:[2,45],77:[2,45],78:[2,45]},{12:70,13:[1,63],14:[1,64]},{9:71,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{13:[1,77],55:72,56:[1,73],59:74,60:75,62:76},{13:[1,80],51:78,52:79},{9:69,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],38:81,44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:69,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],38:82,44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:69,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],38:83,44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:69,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],38:84,44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:85,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:86,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{1:[2,1]},{5:[2,3],11:[2,3],13:[2,3],15:[2,3],16:[2,3],17:[2,3],18:[2,3],19:[2,3],20:[2,3],26:[2,3],37:[2,3],44:[2,3],45:[2,3],46:[2,3],47:[2,3],48:[2,3],50:[2,3],54:[2,3],56:[2,3],64:[2,3],66:[2,3],67:[2,3],69:[2,3],79:[2,3]},{5:[2,6],11:[2,6],13:[2,6],15:[2,6],16:[2,6],17:[2,6],18:[2,6],19:[2,6],20:[2,6],26:[2,6],37:[2,6],44:[2,6],45:[2,6],46:[2,6],47:[2,6],48:[2,6],50:[2,6],54:[2,6],56:[2,6],64:[2,6],66:[2,6],67:[2,6],69:[2,6],79:[2,6]},{9:87,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:69,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],38:88,44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{10:[2,70],13:[2,70],36:[2,70],37:[2,70],39:[2,70],41:[2,70],46:[2,70],49:[2,70],53:[2,70],58:[2,70],63:[2,70],65:[2,70],68:[2,70],69:[2,70],70:[2,70],71:[2,70],72:[2,70],73:[2,70],74:[2,70],75:[2,70],76:[2,70],77:[2,70],78:[2,70]},{9:89,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:90,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:91,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:92,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:93,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:94,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:95,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:96,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:97,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:98,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:99,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:100,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{10:[1,101]},{10:[2,8],13:[2,8],36:[2,8],37:[2,8],39:[2,8],41:[2,8],46:[2,8],49:[2,8],58:[2,8],63:[2,8],65:[2,8],68:[2,8],69:[2,8],70:[2,8],71:[2,8],72:[2,8],73:[2,8],74:[2,8],75:[2,8],76:[2,8],77:[2,8],78:[2,8]},{10:[2,9],13:[2,9],36:[2,9],37:[2,9],39:[2,9],41:[2,9],46:[2,9],49:[2,9],58:[2,9],63:[2,9],65:[2,9],68:[2,9],69:[2,9],70:[2,9],71:[2,9],72:[2,9],73:[2,9],74:[2,9],75:[2,9],76:[2,9],77:[2,9],78:[2,9]},{10:[1,102],22:49,36:[1,47],37:[1,48],46:[1,33],63:[1,54],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{9:103,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:104,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{39:[1,105],41:[1,106]},{22:49,36:[1,47],37:[1,48],39:[2,41],41:[2,41],46:[1,33],58:[2,41],63:[1,54],65:[2,41],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{10:[2,46],13:[2,46],36:[2,46],37:[2,46],39:[2,46],41:[2,46],46:[2,46],49:[2,46],58:[2,46],63:[2,46],65:[2,46],68:[2,46],69:[2,46],70:[2,46],71:[2,46],72:[2,46],73:[2,46],74:[2,46],75:[2,46],76:[2,46],77:[2,46],78:[2,46]},{22:49,36:[1,47],37:[1,48],46:[1,33],49:[1,107],63:[1,54],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{10:[2,52],13:[2,52],36:[2,52],37:[2,52],39:[2,52],41:[2,52],46:[2,52],49:[2,52],58:[2,52],63:[2,52],65:[2,52],68:[2,52],69:[2,52],70:[2,52],71:[2,52],72:[2,52],73:[2,52],74:[2,52],75:[2,52],76:[2,52],77:[2,52],78:[2,52]},{13:[1,77],55:109,57:108,59:74,60:75,62:76},{49:[1,110]},{13:[1,77],49:[2,57],61:111,62:112,63:[1,113]},{13:[2,59],49:[2,59],63:[2,59]},{13:[2,61],41:[1,114],49:[2,61],53:[1,115],63:[2,61]},{13:[1,80],49:[1,116],52:117},{13:[2,49],49:[2,49]},{53:[1,118]},{41:[1,106],65:[1,119]},{41:[1,106],58:[1,120]},{41:[1,106],65:[1,121]},{41:[1,106],58:[1,122]},{10:[2,85],13:[2,85],22:49,36:[1,47],37:[1,48],39:[2,85],41:[2,85],46:[1,33],49:[2,85],58:[2,85],63:[2,85],65:[2,85],68:[2,85],69:[2,85],70:[1,52],71:[1,53],72:[2,85],73:[2,85],74:[2,85],75:[2,85],76:[2,85],77:[2,85],78:[2,85]},{10:[2,86],13:[2,86],22:49,36:[1,47],37:[1,48],39:[2,86],41:[2,86],46:[1,33],49:[2,86],58:[2,86],63:[2,86],65:[2,86],68:[2,86],69:[2,86],70:[2,86],71:[2,86],72:[2,86],73:[2,86],74:[2,86],75:[2,86],76:[2,86],77:[2,86],78:[2,86]},{10:[2,32],13:[2,32],22:49,36:[2,32],37:[2,32],39:[2,32],41:[2,32],46:[1,33],49:[2,32],58:[2,32],63:[2,32],65:[2,32],68:[2,32],69:[2,32],70:[2,32],71:[2,32],72:[2,32],73:[2,32],74:[2,32],75:[2,32],76:[2,32],77:[2,32],78:[2,32]},{39:[1,123],41:[1,106]},{10:[2,73],13:[2,73],22:49,36:[1,47],37:[1,48],39:[2,73],41:[2,73],46:[1,33],49:[2,73],58:[2,73],63:[2,73],65:[2,73],68:[2,73],69:[2,73],70:[1,52],71:[1,53],72:[2,73],73:[2,73],74:[2,73],75:[2,73],76:[2,73],77:[2,73],78:[2,73]},{10:[2,74],13:[2,74],22:49,36:[1,47],37:[1,48],39:[2,74],41:[2,74],46:[1,33],49:[2,74],58:[2,74],63:[2,74],65:[2,74],68:[2,74],69:[2,74],70:[1,52],71:[1,53],72:[2,74],73:[2,74],74:[2,74],75:[2,74],76:[2,74],77:[2,74],78:[2,74]},{10:[2,75],13:[2,75],22:49,36:[1,47],37:[1,48],39:[2,75],41:[2,75],46:[1,33],49:[2,75],58:[2,75],63:[2,75],65:[2,75],68:[2,75],69:[2,75],70:[2,75],71:[2,75],72:[2,75],73:[2,75],74:[2,75],75:[2,75],76:[2,75],77:[2,75],78:[2,75]},{10:[2,76],13:[2,76],22:49,36:[1,47],37:[1,48],39:[2,76],41:[2,76],46:[1,33],49:[2,76],58:[2,76],63:[2,76],65:[2,76],68:[2,76],69:[2,76],70:[2,76],71:[2,76],72:[2,76],73:[2,76],74:[2,76],75:[2,76],76:[2,76],77:[2,76],78:[2,76]},{10:[2,77],13:[2,77],22:49,36:[1,47],37:[1,48],39:[2,77],41:[2,77],46:[1,33],49:[2,77],58:[2,77],63:[2,77],65:[2,77],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[2,77],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{10:[2,78],13:[2,78],22:49,36:[1,47],37:[1,48],39:[2,78],41:[2,78],46:[1,33],49:[2,78],58:[2,78],63:[1,54],65:[2,78],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[2,78],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{10:[2,79],13:[2,79],22:49,36:[1,47],37:[1,48],39:[2,79],41:[2,79],46:[1,33],49:[2,79],58:[2,79],63:[2,79],65:[2,79],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[2,79],73:[2,79],74:[2,79],75:[2,79],76:[2,79],77:[2,79],78:[2,79]},{10:[2,80],13:[2,80],22:49,36:[1,47],37:[1,48],39:[2,80],41:[2,80],46:[1,33],49:[2,80],58:[2,80],63:[2,80],65:[2,80],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[2,80],73:[2,80],74:[2,80],75:[2,80],76:[2,80],77:[2,80],78:[2,80]},{10:[2,81],13:[2,81],22:49,36:[1,47],37:[1,48],39:[2,81],41:[2,81],46:[1,33],49:[2,81],58:[2,81],63:[2,81],65:[2,81],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[2,81],73:[2,81],74:[2,81],75:[2,81],76:[2,81],77:[2,81],78:[2,81]},{10:[2,82],13:[2,82],22:49,36:[1,47],37:[1,48],39:[2,82],41:[2,82],46:[1,33],49:[2,82],58:[2,82],63:[2,82],65:[2,82],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[2,82],73:[2,82],74:[2,82],75:[2,82],76:[2,82],77:[2,82],78:[2,82]},{10:[2,83],13:[2,83],22:49,36:[1,47],37:[1,48],39:[2,83],41:[2,83],46:[1,33],49:[2,83],58:[2,83],63:[2,83],65:[2,83],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[2,83],73:[2,83],74:[2,83],75:[2,83],76:[2,83],77:[2,83],78:[2,83]},{10:[2,84],13:[2,84],22:49,36:[1,47],37:[1,48],39:[2,84],41:[2,84],46:[1,33],49:[2,84],58:[2,84],63:[2,84],65:[2,84],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[2,84],73:[2,84],74:[2,84],75:[2,84],76:[2,84],77:[2,84],78:[2,84]},{5:[2,7],11:[2,7],13:[2,7],15:[2,7],16:[2,7],17:[2,7],18:[2,7],19:[2,7],20:[2,7],26:[2,7],37:[2,7],44:[2,7],45:[2,7],46:[2,7],47:[2,7],48:[2,7],50:[2,7],54:[2,7],56:[2,7],64:[2,7],66:[2,7],67:[2,7],69:[2,7],79:[2,7]},{5:[2,10],11:[2,10],13:[2,10],15:[2,10],16:[2,10],17:[2,10],18:[2,10],19:[2,10],20:[2,10],26:[2,10],37:[2,10],44:[2,10],45:[2,10],46:[2,10],47:[2,10],48:[2,10],50:[2,10],54:[2,10],56:[2,10],64:[2,10],66:[2,10],67:[2,10],69:[2,10],79:[2,10]},{10:[2,71],13:[2,71],22:49,36:[1,47],37:[1,48],39:[2,71],41:[2,71],46:[1,33],49:[2,71],58:[2,71],63:[1,54],65:[2,71],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{10:[2,72],13:[2,72],22:49,36:[1,47],37:[1,48],39:[2,72],41:[2,72],46:[1,33],49:[2,72],58:[2,72],63:[1,54],65:[2,72],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{10:[2,34],13:[2,34],36:[2,34],37:[2,34],39:[2,34],41:[2,34],46:[2,34],49:[2,34],58:[2,34],63:[2,34],65:[2,34],68:[2,34],69:[2,34],70:[2,34],71:[2,34],72:[2,34],73:[2,34],74:[2,34],75:[2,34],76:[2,34],77:[2,34],78:[2,34]},{9:124,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:125,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{41:[1,127],58:[1,126]},{41:[2,54],58:[2,54]},{9:128,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{49:[2,58]},{13:[2,60],49:[2,60],63:[2,60]},{13:[1,129]},{13:[2,62],49:[2,62],63:[2,62]},{9:130,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{9:131,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{13:[2,50],49:[2,50]},{9:133,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],40:132,44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{10:[2,66],13:[2,66],36:[2,66],37:[2,66],39:[2,66],41:[2,66],46:[2,66],49:[2,66],58:[2,66],63:[2,66],65:[2,66],68:[2,66],69:[2,66],70:[2,66],71:[2,66],72:[2,66],73:[2,66],74:[2,66],75:[2,66],76:[2,66],77:[2,66],78:[2,66]},{10:[2,67],13:[2,67],36:[2,67],37:[2,67],39:[2,67],41:[2,67],46:[2,67],49:[2,67],58:[2,67],63:[2,67],65:[2,67],68:[2,67],69:[2,67],70:[2,67],71:[2,67],72:[2,67],73:[2,67],74:[2,67],75:[2,67],76:[2,67],77:[2,67],78:[2,67]},{10:[2,68],13:[2,68],36:[2,68],37:[2,68],39:[2,68],41:[2,68],46:[2,68],49:[2,68],58:[2,68],63:[2,68],65:[2,68],68:[2,68],69:[2,68],70:[2,68],71:[2,68],72:[2,68],73:[2,68],74:[2,68],75:[2,68],76:[2,68],77:[2,68],78:[2,68]},{10:[2,69],13:[2,69],36:[2,69],37:[2,69],39:[2,69],41:[2,69],46:[2,69],49:[2,69],58:[2,69],63:[2,69],65:[2,69],68:[2,69],69:[2,69],70:[2,69],71:[2,69],72:[2,69],73:[2,69],74:[2,69],75:[2,69],76:[2,69],77:[2,69],78:[2,69]},{10:[2,33],13:[2,33],36:[2,33],37:[2,33],39:[2,33],41:[2,33],46:[2,33],49:[2,33],58:[2,33],63:[2,33],65:[2,33],68:[2,33],69:[2,33],70:[2,33],71:[2,33],72:[2,33],73:[2,33],74:[2,33],75:[2,33],76:[2,33],77:[2,33],78:[2,33]},{22:49,36:[1,47],37:[1,48],39:[2,42],41:[2,42],46:[1,33],58:[2,42],63:[1,54],65:[2,42],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{22:49,36:[1,47],37:[1,48],41:[1,134],46:[1,33],63:[1,54],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{10:[2,53],13:[2,53],36:[2,53],37:[2,53],39:[2,53],41:[2,53],46:[2,53],49:[2,53],58:[2,53],63:[2,53],65:[2,53],68:[2,53],69:[2,53],70:[2,53],71:[2,53],72:[2,53],73:[2,53],74:[2,53],75:[2,53],76:[2,53],77:[2,53],78:[2,53]},{13:[1,77],55:135,59:74,60:75,62:76},{10:[2,56],13:[2,56],22:49,36:[1,47],37:[1,48],39:[2,56],41:[2,56],46:[1,33],49:[2,56],58:[2,56],63:[1,54],65:[2,56],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{49:[2,65]},{13:[2,63],22:49,36:[1,47],37:[1,48],41:[1,136],46:[1,33],49:[2,63],63:[1,54],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{10:[2,48],13:[2,48],22:49,36:[1,47],37:[1,48],39:[2,48],41:[2,48],46:[1,33],49:[2,48],58:[2,48],63:[1,54],65:[2,48],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{13:[2,51],49:[2,51]},{13:[2,35],22:49,36:[1,47],37:[1,48],41:[1,137],46:[1,33],49:[2,35],63:[1,54],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]},{9:138,13:[1,16],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:14,22:15,23:17,24:18,25:19,26:[1,20],27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:28,35:29,37:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],50:[1,37],54:[1,36],56:[1,39],64:[1,38],66:[1,40],67:[1,41],69:[1,42],79:[1,43]},{41:[2,55],58:[2,55]},{13:[2,64],49:[2,64],63:[2,64]},{13:[2,36],49:[2,36]},{10:[2,47],13:[2,47],22:49,36:[1,47],37:[1,48],39:[2,47],41:[2,47],46:[1,33],49:[2,47],58:[2,47],63:[1,54],65:[2,47],68:[1,50],69:[1,51],70:[1,52],71:[1,53],72:[1,55],73:[1,56],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61]}],
defaultActions: {44:[2,1],111:[2,58],129:[2,65]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 16
break;
case 1:return 17
break;
case 2:return 18
break;
case 3:/* ignore comment */
break;
case 4:/* ignore comment */
break;
case 5:/* ignore */
break;
case 6:return 19
break;
case 7:return 46
break;
case 8:return 11
break;
case 9:return 47
break;
case 10:return 15
break;
case 11:return 'mfn'	
break;
case 12:return 54
break;
case 13:return 50
break;
case 14:return 48
break;
case 15:return 44
break;
case 16:return 45
break;
case 17:return 20
break;
case 18:return 14
break;
case 19:return 13
break;
case 20:return '\'('
break;
case 21:return 37
break;
case 22:return 39
break;
case 23:return 66
break;
case 24:return 64
break;
case 25:return 65
break;
case 26:return 67
break;
case 27:return 56
break;
case 28:return 58
break;
case 29:return 63
break;
case 30:return 68
break;
case 31:return 69
break;
case 32:return 70
break;
case 33:return 71
break;
case 34:return '^'
break;
case 35:return 63
break;
case 36:return 72
break;
case 37:return 79
break;
case 38:return 10
break;
case 39:return 41
break;
case 40:return 36
break;
case 41:return 75
break;
case 42:return 76
break;
case 43:return 73
break;
case 44:return 74
break;
case 45:return 77
break;
case 46:return 78
break;
case 47:return 53
break;
case 48:return 49
break;
case 49:return '#'
break;
case 50:return 5
break;
}
},
rules: [/^(?:"(?:[^\"\\]|\\"|\\\\)*")/,/^(?:\/(?:[^\/\\]|\\\/|\\\\)*\/[gi]+)/,/^(?:`(?:[^\`]|``)*`)/,/^(?:\/\/[^\n]+\n)/,/^(?:\/\*[^]+?\*\/)/,/^(?:\s+)/,/^(?:-?\d+(?:\.\d*(?:[eE]-?\d+)?|[eE]-?\d+)?)/,/^(?::\w+)/,/^(?:module\b)/,/^(?:import\b)/,/^(?:export\b)/,/^(?:mfn\b)/,/^(?:fn\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:nil\b)/,/^(?:[\w\.]*\.[\w\.]*)/,/^(?:\w+)/,/^(?:'\()/,/^(?:\()/,/^(?:\))/,/^(?:#\{)/,/^(?:\{)/,/^(?:\})/,/^(?:#\[)/,/^(?:\[)/,/^(?:\])/,/^(?:&)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:\^)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?::)/,/^(?:#)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}