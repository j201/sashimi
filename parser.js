/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"statements":4,"EOF":5,"statement":6,"moduleStatement":7,"exportStatement":8,"expr":9,";":10,"module":11,"moduleIdentifier":12,"identifier":13,"identifierWithPeriods":14,"export":15,"string":16,"regex":17,"js":18,"number":19,"keyword":20,"importExpr":21,"ifExpr":22,"fnExpr":23,"letExpr":24,"map":25,"vector":26,"set":27,"bag":28,"mapAccess":29,"binaryOperation":30,"unaryOperation":31,"assignment":32,"(":33,"delimitedExprs":34,")":35,"exprOptionalComma":36,",":37,"separatedExprs":38,"import":39,"if":40,":":41,"let":42,"letBindings":43,"letBinding":44,"fn":45,"fnBindings":46,"nonRestParams":47,"restParam":48,"nonRestParam":49,"=":50,"&":51,"{":52,"}":53,"[":54,"delimitedExpr":55,"]":56,"#{":57,"#[":58,"+":59,"-":60,"/":61,"*":62,"|":63,"<":64,">":65,"<=":66,">=":67,"==":68,"!=":69,"!":70,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",11:"module",13:"identifier",14:"identifierWithPeriods",15:"export",16:"string",17:"regex",18:"js",19:"number",20:"keyword",33:"(",35:")",37:",",39:"import",40:"if",41:":",42:"let",45:"fn",50:"=",51:"&",52:"{",53:"}",54:"[",55:"delimitedExpr",56:"]",57:"#{",58:"#[",59:"+",60:"-",61:"/",62:"*",63:"|",64:"<",65:">",66:"<=",67:">=",68:"==",69:"!=",70:"!"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,2],[7,3],[12,1],[12,1],[8,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,4],[9,3],[36,1],[36,2],[38,2],[38,3],[34,1],[34,2],[21,2],[22,6],[24,4],[43,1],[43,2],[44,2],[23,4],[46,1],[46,2],[47,1],[47,2],[49,1],[49,2],[49,3],[49,4],[48,2],[25,3],[26,3],[27,3],[28,3],[29,2],[32,3],[32,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[31,2],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = [$$[$0]] 
break;
case 3: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = { type: 'module', name: $$[$0-1] } 
break;
case 10: this.$ = { type: 'export', value: $$[$0-1] } 
break;
case 11: this.$ = { type: 'string', value: yytext.slice(1, -1) } 
break;
case 12: this.$ = { type: 'regex', value: yytext } 
break;
case 13: this.$ = { type: 'js', value: yytext.slice(1, -1) } 
break;
case 14: this.$ = { type: 'number', value: Number(yytext) } 
break;
case 15: this.$ = { type: 'keyword', value: yytext } 
break;
case 16: this.$ = { type: 'identifier', value: yytext } 
break;
case 29: this.$ = { type: 'functionCall', function: $$[$0-3], arguments: $$[$0-1] } 
break;
case 30: this.$ = { type: 'exprList', value: $$[$0-1] } 
break;
case 33: this.$ = [$$[$0-1]] 
break;
case 34: $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 35: this.$ = [$$[$0]] 
break;
case 36: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 37: this.$ = { type: 'import', name: $$[$0] } 
break;
case 38: this.$ = { type: 'if', condition: $$[$0-4], consequent: $$[$0-2], alternative: $$[$0] } 
break;
case 39: this.$ = { type: 'let', bindings: $$[$0-2], value: $$[$0] } 
break;
case 40: this.$ = [$$[$0]]; 
break;
case 41: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 42: this.$ = { name: $$[$0-1], value: $$[$0] } 
break;
case 43: this.$ = { type: 'fn', bindings: $$[$0-2], value: $$[$0] } 
break;
case 44: this.$ = $$[$0] 
break;
case 45: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 46: this.$ = [$$[$0]] 
break;
case 47: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 48: this.$ = { name: $$[$0] } 
break;
case 49: this.$ = { name: $$[$0-1] } 
break;
case 50: this.$ = { name: $$[$0-2], default: $$[$0] } 
break;
case 51: this.$ = { name: $$[$0-3], default: $$[$0-1] } 
break;
case 52: this.$ = { name: $$[$0], rest: true } 
break;
case 53: this.$ = { type: 'map', arguments: $$[$0-1] } 
break;
case 54: this.$ = { type: 'vector', arguments: $$[$0-1] } 
break;
case 55: this.$ = { type: 'set', arguments: $$[$0-1] } 
break;
case 56: this.$ = { type: 'bag', arguments: $$[$0-1] } 
break;
case 57: this.$ = { type: 'mapAccess', map: $$[$0-1], key: $$[$0] } 
break;
case 58: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 59: this.$ = { type: 'assignment', assignee: $$[$0-2], value: $$[$0] } 
break;
case 60: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 61: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 62: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 63: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 64: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 65: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 66: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 67: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 68: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 69: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 70: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 71: this.$ = { type: 'binaryOperation', operator: $$[$0-1], operands: [$$[$0-2], $$[$0]] } 
break;
case 72: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
case 73: this.$ = { type: 'unaryOperation', operator: $$[$0-1], operand: $$[$0] } 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,11:[1,7],13:[1,14],15:[1,8],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{1:[3]},{5:[1,38],6:39,7:4,8:5,9:6,11:[1,7],13:[1,14],15:[1,8],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{5:[2,2],11:[2,2],13:[2,2],15:[2,2],16:[2,2],17:[2,2],18:[2,2],19:[2,2],20:[2,2],33:[2,2],39:[2,2],40:[2,2],42:[2,2],45:[2,2],52:[2,2],54:[2,2],57:[2,2],58:[2,2],60:[2,2],70:[2,2]},{5:[2,4],11:[2,4],13:[2,4],15:[2,4],16:[2,4],17:[2,4],18:[2,4],19:[2,4],20:[2,4],33:[2,4],39:[2,4],40:[2,4],42:[2,4],45:[2,4],52:[2,4],54:[2,4],57:[2,4],58:[2,4],60:[2,4],70:[2,4]},{5:[2,5],11:[2,5],13:[2,5],15:[2,5],16:[2,5],17:[2,5],18:[2,5],19:[2,5],20:[2,5],33:[2,5],39:[2,5],40:[2,5],42:[2,5],45:[2,5],52:[2,5],54:[2,5],57:[2,5],58:[2,5],60:[2,5],70:[2,5]},{10:[1,40],20:[1,42],33:[1,41],51:[1,47],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{12:55,13:[1,56],14:[1,57]},{9:58,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{10:[2,11],13:[2,11],20:[2,11],33:[2,11],35:[2,11],37:[2,11],41:[2,11],51:[2,11],53:[2,11],59:[2,11],60:[2,11],61:[2,11],62:[2,11],63:[2,11],64:[2,11],65:[2,11],66:[2,11],67:[2,11],68:[2,11],69:[2,11]},{10:[2,12],13:[2,12],20:[2,12],33:[2,12],35:[2,12],37:[2,12],41:[2,12],51:[2,12],53:[2,12],59:[2,12],60:[2,12],61:[2,12],62:[2,12],63:[2,12],64:[2,12],65:[2,12],66:[2,12],67:[2,12],68:[2,12],69:[2,12]},{10:[2,13],13:[2,13],20:[2,13],33:[2,13],35:[2,13],37:[2,13],41:[2,13],51:[2,13],53:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],64:[2,13],65:[2,13],66:[2,13],67:[2,13],68:[2,13],69:[2,13]},{10:[2,14],13:[2,14],20:[2,14],33:[2,14],35:[2,14],37:[2,14],41:[2,14],51:[2,14],53:[2,14],59:[2,14],60:[2,14],61:[2,14],62:[2,14],63:[2,14],64:[2,14],65:[2,14],66:[2,14],67:[2,14],68:[2,14],69:[2,14]},{10:[2,15],13:[2,15],20:[2,15],33:[2,15],35:[2,15],37:[2,15],41:[2,15],51:[2,15],53:[2,15],59:[2,15],60:[2,15],61:[2,15],62:[2,15],63:[2,15],64:[2,15],65:[2,15],66:[2,15],67:[2,15],68:[2,15],69:[2,15]},{10:[2,16],13:[2,16],20:[2,16],33:[2,16],35:[2,16],37:[2,16],41:[2,16],50:[1,59],51:[2,16],53:[2,16],59:[2,16],60:[2,16],61:[2,16],62:[2,16],63:[2,16],64:[2,16],65:[2,16],66:[2,16],67:[2,16],68:[2,16],69:[2,16]},{10:[2,17],13:[2,17],20:[2,17],33:[2,17],35:[2,17],37:[2,17],41:[2,17],51:[2,17],53:[2,17],59:[2,17],60:[2,17],61:[2,17],62:[2,17],63:[2,17],64:[2,17],65:[2,17],66:[2,17],67:[2,17],68:[2,17],69:[2,17]},{10:[2,18],13:[2,18],20:[2,18],33:[2,18],35:[2,18],37:[2,18],41:[2,18],51:[2,18],53:[2,18],59:[2,18],60:[2,18],61:[2,18],62:[2,18],63:[2,18],64:[2,18],65:[2,18],66:[2,18],67:[2,18],68:[2,18],69:[2,18]},{10:[2,19],13:[2,19],20:[2,19],33:[2,19],35:[2,19],37:[2,19],41:[2,19],51:[2,19],53:[2,19],59:[2,19],60:[2,19],61:[2,19],62:[2,19],63:[2,19],64:[2,19],65:[2,19],66:[2,19],67:[2,19],68:[2,19],69:[2,19]},{10:[2,20],13:[2,20],20:[2,20],33:[2,20],35:[2,20],37:[2,20],41:[2,20],51:[2,20],53:[2,20],59:[2,20],60:[2,20],61:[2,20],62:[2,20],63:[2,20],64:[2,20],65:[2,20],66:[2,20],67:[2,20],68:[2,20],69:[2,20]},{10:[2,21],13:[2,21],20:[2,21],33:[2,21],35:[2,21],37:[2,21],41:[2,21],51:[2,21],53:[2,21],59:[2,21],60:[2,21],61:[2,21],62:[2,21],63:[2,21],64:[2,21],65:[2,21],66:[2,21],67:[2,21],68:[2,21],69:[2,21]},{10:[2,22],13:[2,22],20:[2,22],33:[2,22],35:[2,22],37:[2,22],41:[2,22],51:[2,22],53:[2,22],59:[2,22],60:[2,22],61:[2,22],62:[2,22],63:[2,22],64:[2,22],65:[2,22],66:[2,22],67:[2,22],68:[2,22],69:[2,22]},{10:[2,23],13:[2,23],20:[2,23],33:[2,23],35:[2,23],37:[2,23],41:[2,23],51:[2,23],53:[2,23],59:[2,23],60:[2,23],61:[2,23],62:[2,23],63:[2,23],64:[2,23],65:[2,23],66:[2,23],67:[2,23],68:[2,23],69:[2,23]},{10:[2,24],13:[2,24],20:[2,24],33:[2,24],35:[2,24],37:[2,24],41:[2,24],51:[2,24],53:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24],63:[2,24],64:[2,24],65:[2,24],66:[2,24],67:[2,24],68:[2,24],69:[2,24]},{10:[2,25],13:[2,25],20:[2,25],33:[2,25],35:[2,25],37:[2,25],41:[2,25],50:[1,60],51:[2,25],53:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25],63:[2,25],64:[2,25],65:[2,25],66:[2,25],67:[2,25],68:[2,25],69:[2,25]},{10:[2,26],13:[2,26],20:[2,26],33:[2,26],35:[2,26],37:[2,26],41:[2,26],51:[2,26],53:[2,26],59:[2,26],60:[2,26],61:[2,26],62:[2,26],63:[2,26],64:[2,26],65:[2,26],66:[2,26],67:[2,26],68:[2,26],69:[2,26]},{10:[2,27],13:[2,27],20:[2,27],33:[2,27],35:[2,27],37:[2,27],41:[2,27],51:[2,27],53:[2,27],59:[2,27],60:[2,27],61:[2,27],62:[2,27],63:[2,27],64:[2,27],65:[2,27],66:[2,27],67:[2,27],68:[2,27],69:[2,27]},{10:[2,28],13:[2,28],20:[2,28],33:[2,28],35:[2,28],37:[2,28],41:[2,28],51:[2,28],53:[2,28],59:[2,28],60:[2,28],61:[2,28],62:[2,28],63:[2,28],64:[2,28],65:[2,28],66:[2,28],67:[2,28],68:[2,28],69:[2,28]},{9:62,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],34:61,38:63,39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{12:64,13:[1,56],14:[1,57]},{9:65,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{13:[1,69],46:66,47:67,49:68},{13:[1,72],43:70,44:71},{9:62,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],34:73,38:63,39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{55:[1,74]},{55:[1,75]},{55:[1,76]},{9:77,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:78,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{1:[2,1]},{5:[2,3],11:[2,3],13:[2,3],15:[2,3],16:[2,3],17:[2,3],18:[2,3],19:[2,3],20:[2,3],33:[2,3],39:[2,3],40:[2,3],42:[2,3],45:[2,3],52:[2,3],54:[2,3],57:[2,3],58:[2,3],60:[2,3],70:[2,3]},{5:[2,6],11:[2,6],13:[2,6],15:[2,6],16:[2,6],17:[2,6],18:[2,6],19:[2,6],20:[2,6],33:[2,6],39:[2,6],40:[2,6],42:[2,6],45:[2,6],52:[2,6],54:[2,6],57:[2,6],58:[2,6],60:[2,6],70:[2,6]},{9:62,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],34:79,38:63,39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{10:[2,57],13:[2,57],20:[2,57],33:[2,57],35:[2,57],37:[2,57],41:[2,57],50:[2,57],51:[2,57],53:[2,57],59:[2,57],60:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],65:[2,57],66:[2,57],67:[2,57],68:[2,57],69:[2,57]},{9:80,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:81,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:82,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:83,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:84,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:85,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:86,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:87,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:88,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:89,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:90,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:91,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{10:[1,92]},{10:[2,8],13:[2,8],20:[2,8],33:[2,8],35:[2,8],37:[2,8],41:[2,8],51:[2,8],53:[2,8],59:[2,8],60:[2,8],61:[2,8],62:[2,8],63:[2,8],64:[2,8],65:[2,8],66:[2,8],67:[2,8],68:[2,8],69:[2,8]},{10:[2,9],13:[2,9],20:[2,9],33:[2,9],35:[2,9],37:[2,9],41:[2,9],51:[2,9],53:[2,9],59:[2,9],60:[2,9],61:[2,9],62:[2,9],63:[2,9],64:[2,9],65:[2,9],66:[2,9],67:[2,9],68:[2,9],69:[2,9]},{10:[1,93],20:[1,42],33:[1,41],51:[1,47],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{9:94,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:95,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{35:[1,96]},{20:[1,42],33:[1,41],35:[2,35],37:[1,97],51:[1,47],53:[2,35],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{9:98,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{10:[2,37],13:[2,37],20:[2,37],33:[2,37],35:[2,37],37:[2,37],41:[2,37],51:[2,37],53:[2,37],59:[2,37],60:[2,37],61:[2,37],62:[2,37],63:[2,37],64:[2,37],65:[2,37],66:[2,37],67:[2,37],68:[2,37],69:[2,37]},{20:[1,42],33:[1,41],41:[1,99],51:[1,47],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{41:[1,100]},{13:[1,69],41:[2,44],48:101,49:102,51:[1,103]},{13:[2,46],41:[2,46],51:[2,46]},{13:[2,48],37:[1,104],41:[2,48],50:[1,105],51:[2,48]},{13:[1,72],41:[1,106],44:107},{13:[2,40],41:[2,40]},{9:109,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],36:108,39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{53:[1,110]},{56:[1,111]},{53:[1,112]},{56:[1,113]},{10:[2,72],13:[2,72],20:[1,42],33:[1,41],35:[2,72],37:[2,72],41:[2,72],51:[2,72],53:[2,72],59:[2,72],60:[2,72],61:[1,45],62:[1,46],63:[2,72],64:[2,72],65:[2,72],66:[2,72],67:[2,72],68:[2,72],69:[2,72]},{10:[2,73],13:[2,73],20:[1,42],33:[1,41],35:[2,73],37:[2,73],41:[2,73],51:[2,73],53:[2,73],59:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],64:[2,73],65:[2,73],66:[2,73],67:[2,73],68:[2,73],69:[2,73]},{35:[1,114]},{10:[2,60],13:[2,60],20:[1,42],33:[1,41],35:[2,60],37:[2,60],41:[2,60],51:[2,60],53:[2,60],59:[2,60],60:[2,60],61:[1,45],62:[1,46],63:[2,60],64:[2,60],65:[2,60],66:[2,60],67:[2,60],68:[2,60],69:[2,60]},{10:[2,61],13:[2,61],20:[1,42],33:[1,41],35:[2,61],37:[2,61],41:[2,61],51:[2,61],53:[2,61],59:[2,61],60:[2,61],61:[1,45],62:[1,46],63:[2,61],64:[2,61],65:[2,61],66:[2,61],67:[2,61],68:[2,61],69:[2,61]},{10:[2,62],13:[2,62],20:[1,42],33:[1,41],35:[2,62],37:[2,62],41:[2,62],51:[2,62],53:[2,62],59:[2,62],60:[2,62],61:[2,62],62:[2,62],63:[2,62],64:[2,62],65:[2,62],66:[2,62],67:[2,62],68:[2,62],69:[2,62]},{10:[2,63],13:[2,63],20:[1,42],33:[1,41],35:[2,63],37:[2,63],41:[2,63],51:[2,63],53:[2,63],59:[2,63],60:[2,63],61:[2,63],62:[2,63],63:[2,63],64:[2,63],65:[2,63],66:[2,63],67:[2,63],68:[2,63],69:[2,63]},{10:[2,64],13:[2,64],20:[1,42],33:[1,41],35:[2,64],37:[2,64],41:[2,64],51:[2,64],53:[2,64],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[2,64],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{10:[2,65],13:[2,65],20:[1,42],33:[1,41],35:[2,65],37:[2,65],41:[2,65],51:[1,47],53:[2,65],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[2,65],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{10:[2,66],13:[2,66],20:[1,42],33:[1,41],35:[2,66],37:[2,66],41:[2,66],51:[2,66],53:[2,66],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[2,66],64:[2,66],65:[2,66],66:[2,66],67:[2,66],68:[2,66],69:[2,66]},{10:[2,67],13:[2,67],20:[1,42],33:[1,41],35:[2,67],37:[2,67],41:[2,67],51:[2,67],53:[2,67],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[2,67],64:[2,67],65:[2,67],66:[2,67],67:[2,67],68:[2,67],69:[2,67]},{10:[2,68],13:[2,68],20:[1,42],33:[1,41],35:[2,68],37:[2,68],41:[2,68],51:[2,68],53:[2,68],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[2,68],64:[2,68],65:[2,68],66:[2,68],67:[2,68],68:[2,68],69:[2,68]},{10:[2,69],13:[2,69],20:[1,42],33:[1,41],35:[2,69],37:[2,69],41:[2,69],51:[2,69],53:[2,69],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[2,69],64:[2,69],65:[2,69],66:[2,69],67:[2,69],68:[2,69],69:[2,69]},{10:[2,70],13:[2,70],20:[1,42],33:[1,41],35:[2,70],37:[2,70],41:[2,70],51:[2,70],53:[2,70],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[2,70],64:[2,70],65:[2,70],66:[2,70],67:[2,70],68:[2,70],69:[2,70]},{10:[2,71],13:[2,71],20:[1,42],33:[1,41],35:[2,71],37:[2,71],41:[2,71],51:[2,71],53:[2,71],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[2,71],64:[2,71],65:[2,71],66:[2,71],67:[2,71],68:[2,71],69:[2,71]},{5:[2,7],11:[2,7],13:[2,7],15:[2,7],16:[2,7],17:[2,7],18:[2,7],19:[2,7],20:[2,7],33:[2,7],39:[2,7],40:[2,7],42:[2,7],45:[2,7],52:[2,7],54:[2,7],57:[2,7],58:[2,7],60:[2,7],70:[2,7]},{5:[2,10],11:[2,10],13:[2,10],15:[2,10],16:[2,10],17:[2,10],18:[2,10],19:[2,10],20:[2,10],33:[2,10],39:[2,10],40:[2,10],42:[2,10],45:[2,10],52:[2,10],54:[2,10],57:[2,10],58:[2,10],60:[2,10],70:[2,10]},{10:[2,58],13:[2,58],20:[1,42],33:[1,41],35:[2,58],37:[2,58],41:[2,58],51:[1,47],53:[2,58],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{10:[2,59],13:[2,59],20:[1,42],33:[1,41],35:[2,59],37:[2,59],41:[2,59],51:[1,47],53:[2,59],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{10:[2,30],13:[2,30],20:[2,30],33:[2,30],35:[2,30],37:[2,30],41:[2,30],51:[2,30],53:[2,30],59:[2,30],60:[2,30],61:[2,30],62:[2,30],63:[2,30],64:[2,30],65:[2,30],66:[2,30],67:[2,30],68:[2,30],69:[2,30]},{13:[2,33],16:[2,33],17:[2,33],18:[2,33],19:[2,33],20:[2,33],33:[2,33],39:[2,33],40:[2,33],42:[2,33],45:[2,33],52:[2,33],54:[2,33],57:[2,33],58:[2,33],60:[2,33],70:[2,33]},{20:[1,42],33:[1,41],35:[2,36],37:[1,115],51:[1,47],53:[2,36],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{9:116,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:117,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{41:[2,45]},{13:[2,47],41:[2,47],51:[2,47]},{13:[1,118]},{13:[2,49],41:[2,49],51:[2,49]},{9:119,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{9:120,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{13:[2,41],41:[2,41]},{13:[2,42],41:[2,42]},{13:[2,31],20:[1,42],33:[1,41],37:[1,121],41:[2,31],51:[1,47],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{10:[2,53],13:[2,53],20:[2,53],33:[2,53],35:[2,53],37:[2,53],41:[2,53],51:[2,53],53:[2,53],59:[2,53],60:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53],65:[2,53],66:[2,53],67:[2,53],68:[2,53],69:[2,53]},{10:[2,54],13:[2,54],20:[2,54],33:[2,54],35:[2,54],37:[2,54],41:[2,54],51:[2,54],53:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54],65:[2,54],66:[2,54],67:[2,54],68:[2,54],69:[2,54]},{10:[2,55],13:[2,55],20:[2,55],33:[2,55],35:[2,55],37:[2,55],41:[2,55],51:[2,55],53:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],63:[2,55],64:[2,55],65:[2,55],66:[2,55],67:[2,55],68:[2,55],69:[2,55]},{10:[2,56],13:[2,56],20:[2,56],33:[2,56],35:[2,56],37:[2,56],41:[2,56],51:[2,56],53:[2,56],59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],65:[2,56],66:[2,56],67:[2,56],68:[2,56],69:[2,56]},{10:[2,29],13:[2,29],20:[2,29],33:[2,29],35:[2,29],37:[2,29],41:[2,29],51:[2,29],53:[2,29],59:[2,29],60:[2,29],61:[2,29],62:[2,29],63:[2,29],64:[2,29],65:[2,29],66:[2,29],67:[2,29],68:[2,29],69:[2,29]},{13:[2,34],16:[2,34],17:[2,34],18:[2,34],19:[2,34],20:[2,34],33:[2,34],39:[2,34],40:[2,34],42:[2,34],45:[2,34],52:[2,34],54:[2,34],57:[2,34],58:[2,34],60:[2,34],70:[2,34]},{20:[1,42],33:[1,41],37:[1,122],51:[1,47],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{10:[2,43],13:[2,43],20:[1,42],33:[1,41],35:[2,43],37:[2,43],41:[2,43],51:[1,47],53:[2,43],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{41:[2,52]},{13:[2,50],20:[1,42],33:[1,41],37:[1,123],41:[2,50],51:[1,47],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{10:[2,39],13:[2,39],20:[1,42],33:[1,41],35:[2,39],37:[2,39],41:[2,39],51:[1,47],53:[2,39],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]},{13:[2,32],41:[2,32]},{9:124,13:[1,14],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:24,31:25,32:26,33:[1,27],39:[1,28],40:[1,29],42:[1,31],45:[1,30],52:[1,32],54:[1,33],57:[1,34],58:[1,35],60:[1,36],70:[1,37]},{13:[2,51],41:[2,51],51:[2,51]},{10:[2,38],13:[2,38],20:[1,42],33:[1,41],35:[2,38],37:[2,38],41:[2,38],51:[1,47],53:[2,38],59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54]}],
defaultActions: {38:[2,1],101:[2,45],118:[2,52]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:return 16
break;
case 2:return 17
break;
case 3:return 18
break;
case 4:/* ignore */
break;
case 5:return 19
break;
case 6:return 20
break;
case 7:return 11
break;
case 8:return 39
break;
case 9:return 15
break;
case 10:return 45
break;
case 11:return 42
break;
case 12:return 40
break;
case 13:return 14
break;
case 14:return 13
break;
case 15:return 33
break;
case 16:return 35
break;
case 17:return 57
break;
case 18:return 52
break;
case 19:return 53
break;
case 20:return 58
break;
case 21:return 54
break;
case 22:return 56
break;
case 23:return 51
break;
case 24:return 59
break;
case 25:return 60
break;
case 26:return 61
break;
case 27:return 62
break;
case 28:return '^'
break;
case 29:return 51
break;
case 30:return 63
break;
case 31:return 70
break;
case 32:return 10
break;
case 33:return 37
break;
case 34:return '.'
break;
case 35:return 66
break;
case 36:return 67
break;
case 37:return 64
break;
case 38:return 65
break;
case 39:return 68
break;
case 40:return 69
break;
case 41:return 50
break;
case 42:return 41
break;
case 43:return 5
break;
}
},
rules: [/^(?:\/\/[^\n]+\n)/,/^(?:"(?:[^\"\\]|\\"|\\\\)*")/,/^(?:\/(?:[^\/\\]|\\\/|\\\\)*\/[gi]+)/,/^(?:`(?:[^\`]|``)*`)/,/^(?:\s+)/,/^(?:-?\d+(?:\.\d*(?:[eE]-?\d+)?|[eE]-?\d+)?)/,/^(?::\w+)/,/^(?:module\b)/,/^(?:import\b)/,/^(?:export\b)/,/^(?:fn\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:[\w\.]*\.[\w\.]*)/,/^(?:\w+)/,/^(?:\()/,/^(?:\))/,/^(?:#\{)/,/^(?:\{)/,/^(?:\})/,/^(?:#\[)/,/^(?:\[)/,/^(?:\])/,/^(?:&)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:\^)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?::)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}